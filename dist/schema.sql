CREATE TABLE IF NOT EXISTS CREDIT_TENDER (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_METHOD_STATUS VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_CARD (
  CREDIT_CARD_EXPIRED BOOLEAN NOT NULL,
  CARD_TOKEN VARCHAR(500) NOT NULL,
  ISSUE_NUMBER VARCHAR(500) NOT NULL,
  BILL_TO_CITY VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  MASKED_NUMBER VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  COMPANY_NAME VARCHAR(500),
  CARD_HOLDER_NAME VARCHAR(500) NOT NULL,
  NUMBER_LAST_DIGITS VARCHAR(500) NOT NULL,
  PAYMENT_CARD_TYPE VARCHAR(500) NOT NULL,
  DERIVED_CARD_TYPE_CODE VARCHAR(500),
  BILL_TO_FIRST_NAME VARCHAR(500),
  BILL_TO_STREET VARCHAR(500),
  EXPIRATION_YEAR VARCHAR(500) NOT NULL,
  BILL_TO_STREET2 VARCHAR(500),
  EXPIRATION_MONTH VARCHAR(500) NOT NULL,
  BILL_TO_LAST_NAME VARCHAR(500),
  PAYMENT_METHOD_STATUS VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_METHOD_TYPE (
  TYPE_DESCRIPTION VARCHAR(500),
  MEDIA_TYPE VARCHAR(500),
  MAX_PER_PERIOD_AMOUNT INTEGER,
  TYPE_REQUIRED_IDENTIFICATION VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  USE_MINIMUM_AGE_YEAR INTEGER,
  MAX_TRANSACTION_AMOUNT INTEGER,
  MAX_PER_PERIOD_TRANSACTION_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS COUPON (
  PRIMARY_SCAN_CODE_LABEL VARCHAR(500),
  IS_RETURN_COUPON BOOLEAN,
  EXPIRATION_DATE DATE,
  ID VARCHAR(36) UNIQUE NOT NULL,
  SECONDARY_SCAN_CODE_LABEL VARCHAR(500),
  SCAN_CODE VARCHAR(500),
  COUPON_CODE VARCHAR(500),
  RETURN_COUPON_REASON VARCHAR(500),
  DISCOUNT_AMOUNT INTEGER,
  IS_VALID BOOLEAN,
  COUPON_STATUS VARCHAR(500),
  DISCOUNT_PERCENTAGE INTEGER,
  COUPON_COUNT INTEGER,
  PAYMENT_METHOD_STATUS VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_METHOD (
  PAYMENT_METHOD_STATUS VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_TYPE (
  OPT_IN_PRIORITY INTEGER NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_LOCATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_APP (
  APPLICATION_LOGIN VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_ADDRESS (
  IS_USED_FOR_SHIPPING BOOLEAN,
  STATE_PROVINCE_NAME VARCHAR(500),
  ADDRESS_LINE3 VARCHAR(500),
  COUNTRY_NAME VARCHAR(500),
  POSTAL_CODE_TEXT VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  GEO_LATITUDE INTEGER,
  ADDRESS_LINE2 VARCHAR(500),
  ADDRESS_LINE4 VARCHAR(500),
  GEO_ACCURACY INTEGER,
  GEO_LONGITUDE INTEGER,
  ADDRESS_LINE1 VARCHAR(500),
  CITY_NAME VARCHAR(500),
  IS_USED_FOR_BILLING BOOLEAN,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY_WEB_ADDRESS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  WEB_SITE_UR_L VARCHAR(500) NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_EMAIL (
  EMAIL_LATEST_BOUNCE_REASON_TEXT VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  EMAIL_MAIL_BOX VARCHAR(500) NOT NULL,
  EMAIL_DOMAIN VARCHAR(500) NOT NULL,
  EMAIL_ADDRESS VARCHAR(500) NOT NULL,
  EMAIL_LATEST_BOUNCE_DATE_TIME DATE NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_SOCIAL (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PROFILE_PICTURE_UR_L VARCHAR(500) NOT NULL,
  FOLLOWERS_COUNT INTEGER NOT NULL,
  SOCIAL_HANDLE_NAME VARCHAR(500) NOT NULL,
  SOCIAL_FAN_STATUS VARCHAR(500) NOT NULL,
  SOCIAL_HANDLE VARCHAR(500) NOT NULL,
  SOCIAL_NETWORK_PROVIDER VARCHAR(500) NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_PHONE (
  EXTENSION_NUMBER VARCHAR(500),
  PHONE_COUNTRY_CODE VARCHAR(500),
  COUNTRY_NAME VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  AREA_CODE VARCHAR(500),
  IS_SM_SCAPABLE BOOLEAN NOT NULL,
  SHORT_CODE INTEGER,
  FORMATTED_INTERNATIONAL_PHONE_NUMBER VARCHAR(500) NOT NULL,
  PRIMARY_PHONE_TYPE VARCHAR(500) NOT NULL,
  IS_FAX_CAPABLE BOOLEAN NOT NULL,
  FORMATTED_E164_PHONE_NUMBER VARCHAR(500),
  FORMATTED_NATIONAL_PHONE_NUMBER VARCHAR(500) NOT NULL,
  TELEPHONE_NUMBER VARCHAR(500) NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT (
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN NOT NULL,
  FOR_PERSONAL_USE BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_PRODUCT_PRICE_ADJUSTMENT (
  ADJUSTMENT_AMOUNT INTEGER NOT NULL,
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_AMOUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ADJUSTMENT_TAX_AMOUNT INTEGER
);

CREATE TABLE IF NOT EXISTS SHIPMENT (
  GIFT_MESSAGE_TEXT VARCHAR(500),
  SHIPMENT_NUMBER VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  IS_GIFT BOOLEAN,
  ACTUAL_DELIVERY_DATE_TIME TIME,
  SPECIAL_INSTRUCTIONS_TEXT VARCHAR(500),
  CARRIER_TRACKING_NUMBER VARCHAR(500),
  ESTIMATED_DELIVERY_DATE_TIME TIME,
  SCHEDULED_DELIVERY_DATE_TIME TIME,
  SHIPMENT_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_PACKAGE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  SHIPMENT_PRODUCT_COUNT INTEGER NOT NULL,
  SHIPMENT_PRODUCT_DESCRIPTION VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_DOCUMENT (
  ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPPING_METHOD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPMENT_PRODUCT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  SHIPMENT_PRODUCT_COUNT INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_RESULT_CODE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_CREDIT_MEMO_APPLICATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  EFFECTIVE_DATE DATE NOT NULL,
  PAYMENT_APPLICATION_TYPE VARCHAR(500) NOT NULL,
  COMMENT_TEXT VARCHAR(500),
  HAS_BEEN_UNAPPLIED BOOLEAN,
  APPLIED_AMOUNT INTEGER NOT NULL,
  PAYMENT_BALANCE_AMOUNT INTEGER NOT NULL,
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_AUTH_REVERSAL_LOG (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_GATEWAY_AUTHORIZATION_CODE VARCHAR(500) NOT NULL,
  INTERNAL_RESULT_CODE VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_AV_SCODE VARCHAR(500) NOT NULL,
  INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_LOG_NAME VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_AUTHORIZATION_REVERSAL (
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  AUTHORIZATION_REVERSAL_AMOUNT INTEGER NOT NULL,
  CUSTOMER_AUTHORIZATION_REVERSAL_PHONE VARCHAR(500),
  I_PADDRESS VARCHAR(500),
  PAYMENT_AUTHORIZATION_REVERSAL_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_AUTHORIZATION_PROCESSING_MODE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_GATEWAY_INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_AUTHORIZATION_REVERSAL_NAME VARCHAR(500),
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  REQUEST_DATE TIME NOT NULL,
  PAYMENT_AUTHORIZATION_REVERSAL_COMMENT_TEXT VARCHAR(500),
  MAC_ADDRESS VARCHAR(500),
  CUSTOMER_AUTHORIZATION_REVERSAL_EMAIL VARCHAR(500),
  PAYMENT_GATEWAY_DATE TIME NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_ALLOCATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_ALLOCATION_NAME VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PAYMENT_APPLICATION (
  EFFECTIVE_DATE DATE NOT NULL,
  PAYMENT_APPLICATION_TYPE VARCHAR(500) NOT NULL,
  COMMENT_TEXT VARCHAR(500),
  HAS_BEEN_UNAPPLIED BOOLEAN,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  APPLIED_AMOUNT INTEGER NOT NULL,
  PAYMENT_BALANCE_AMOUNT INTEGER NOT NULL,
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_PROVIDER (
  APEX_ADAPTER_CLASS_NAME VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_GATEWAY_PROVIDER_COMMENT_TEXT VARCHAR(500),
  PAYMENT_GATEWAY_PROVIDER_NAME VARCHAR(500) NOT NULL,
  DEVELOPER_NAME VARCHAR(500) NOT NULL,
  NAMESPACE_PREFIX_TEXT VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_POLICY (
  DESCRIPTION VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PAYMENT_POLICY_TREATMENT_SELECTION VARCHAR(500) NOT NULL,
  PAYMENT_POLICY_STATUS VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_TREATMENT_METHOD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_TREATMENT_METHOD_CODE VARCHAR(500) NOT NULL,
  PAYMENT_TREATMENT_METHOD_NAME VARCHAR(500) NOT NULL,
  PAYMENT_TREATMENT_METHOD_DESCRIPTION VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_INVOICE_APPLICATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_INVOICE_APPLICATION_NAME VARCHAR(500),
  INVOICE_BALANCE_AMOUNT INTEGER NOT NULL,
  PAYMENT_INVOICE_APPLICATION_TYPE VARCHAR(500),
  EFFECTIVE_DATE DATE NOT NULL,
  PAYMENT_APPLICATION_TYPE VARCHAR(500) NOT NULL,
  COMMENT_TEXT VARCHAR(500),
  HAS_BEEN_UNAPPLIED BOOLEAN,
  NAME VARCHAR(500) NOT NULL,
  APPLIED_AMOUNT INTEGER NOT NULL,
  PAYMENT_BALANCE_AMOUNT INTEGER NOT NULL,
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_INTERACTION_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GROUP (
  TOTAL_REVERSAL_AMOUNT INTEGER NOT NULL,
  TOTAL_AUTHORIZATION_AMOUNT INTEGER NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  TOTAL_PAYMENT_AMOUNT INTEGER NOT NULL,
  PAYMENT_GROUP_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS REFUND_CREDIT_MEMO_ALLOCATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  EFFECTIVE_DATE DATE NOT NULL,
  HAS_BEEN_UNAPPLIED BOOLEAN,
  REFUND_ALLOCATION_TYPE VARCHAR(500) NOT NULL,
  ALLOCATED_AMOUNT INTEGER NOT NULL,
  REFUND_BALANCE_AMOUNT INTEGER NOT NULL,
  REFUND_ALLOCATION_NAME VARCHAR(500),
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_PAYMENT_LOG (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_GATEWAY_AUTHORIZATION_CODE VARCHAR(500) NOT NULL,
  INTERNAL_RESULT_CODE VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_AV_SCODE VARCHAR(500) NOT NULL,
  INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_LOG_NAME VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS REFUND_ALLOCATION (
  EFFECTIVE_DATE DATE NOT NULL,
  HAS_BEEN_UNAPPLIED BOOLEAN,
  REFUND_ALLOCATION_TYPE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ALLOCATED_AMOUNT INTEGER NOT NULL,
  REFUND_BALANCE_AMOUNT INTEGER NOT NULL,
  REFUND_ALLOCATION_NAME VARCHAR(500),
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_AUTHORIZATION_LOG (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_GATEWAY_AUTHORIZATION_CODE VARCHAR(500) NOT NULL,
  INTERNAL_RESULT_CODE VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_AV_SCODE VARCHAR(500) NOT NULL,
  INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_LOG_NAME VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_INVOICE_ALLOCATION (
  PAYMENT_INVOICE_ALLOCATION_NAME VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  APPLIED_AMOUNT INTEGER NOT NULL,
  INVOICE_BALANCE_AMOUNT INTEGER NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_ALLOCATION_NAME VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PAYMENT (
  PAYMENT_STATUS VARCHAR(500) NOT NULL,
  AUTHORIZATION_PROCESSING_MODE VARCHAR(500) NOT NULL,
  I_PADDRESS VARCHAR(500),
  COMMENT_TEXT VARCHAR(500) NOT NULL,
  PAYMENT_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_RESULT VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  CUSTOMER_EMAIL_ADDRESS VARCHAR(500),
  NAME VARCHAR(500) NOT NULL,
  LATEST_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  LATEST_GATEWAY_DATE DATE NOT NULL,
  BALANCE_AMOUNT INTEGER NOT NULL,
  PAYMENT_TYPE VARCHAR(500) NOT NULL,
  CUSTOMER_PHONE_NUMBER VARCHAR(500),
  LATEST_PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_EFFECTIVE_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_CANCELLATION_DATE DATE NOT NULL,
  MAC_ADDRESS VARCHAR(500),
  TOTAL_APPLIED_AMOUNT INTEGER NOT NULL,
  NET_APPLIED_AMOUNT INTEGER NOT NULL,
  TOTAL_UNAPPLIED_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_CREDIT_MEMO_ALLOCATION (
  APPLIED_AMOUNT INTEGER NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_ALLOCATION_NAME VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PAYMENT_TREATMENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_APPLICATION_LEVEL VARCHAR(500),
  SHOULD_AUTO_INVOICE BOOLEAN,
  PAYMENT_TREATMENT_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_TREATMENT_NAME VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PAYMENT_AUTHORIZATION (
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  I_PADDRESS VARCHAR(500),
  TOTAL_PAYMENT_CAPTURE_AMOUNT INTEGER NOT NULL,
  PAYMENT_AUTHORIZATION_PROCESSING_MODE VARCHAR(500) NOT NULL,
  AUTHORIZATION_AMOUNT INTEGER NOT NULL,
  EXPIRATION_DATE DATE NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_GATEWAY_INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  GATEWAY_REFERENCE_DETAILS_TEXT VARCHAR(500) NOT NULL,
  TOTAL_AUTHORIZATION_REVERSAL_AMOUNT INTEGER NOT NULL,
  PAYMENT_AUTHORIZATION_COMMENT_TEXT VARCHAR(500),
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_AUTHORIZATION_NUMBER VARCHAR(500) NOT NULL,
  REQUEST_DATE TIME NOT NULL,
  AVAILABLE_BALANCE_AMOUNT INTEGER NOT NULL,
  GATEWAY_RESULT_CODE_DESCRIPTION VARCHAR(500),
  MAC_ADDRESS VARCHAR(500),
  GATEWAY_AUTHORIZATION_CODE VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_DATE TIME NOT NULL,
  PAYMENT_AUTHORIZATION_STATUS VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS REFUND_PAYMENT_ALLOCATION (
  REFUND_ALLOCATION_COMMENTS_DATE DATE NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  PAYMENT_BALANCE_AMOUNT INTEGER NOT NULL,
  REFUND_ALLOCATION_COMMENT_TEXT VARCHAR(500),
  CREDIT_MEMO_BALANCE_AMOUNT INTEGER NOT NULL,
  REFUND_PAYMENT_ALLOCATION_NAME VARCHAR(500),
  EFFECTIVE_DATE DATE NOT NULL,
  HAS_BEEN_UNAPPLIED BOOLEAN,
  REFUND_ALLOCATION_TYPE VARCHAR(500) NOT NULL,
  ALLOCATED_AMOUNT INTEGER NOT NULL,
  REFUND_BALANCE_AMOUNT INTEGER NOT NULL,
  REFUND_ALLOCATION_NAME VARCHAR(500),
  APPLIED_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  UNAPPLIED_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS REFUND_PAYMENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  NAME VARCHAR(500),
  PAYMENT_STATUS VARCHAR(500) NOT NULL,
  AUTHORIZATION_PROCESSING_MODE VARCHAR(500) NOT NULL,
  I_PADDRESS VARCHAR(500),
  COMMENT_TEXT VARCHAR(500) NOT NULL,
  PAYMENT_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_RESULT VARCHAR(500) NOT NULL,
  CUSTOMER_EMAIL_ADDRESS VARCHAR(500),
  LATEST_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  LATEST_GATEWAY_DATE DATE NOT NULL,
  BALANCE_AMOUNT INTEGER NOT NULL,
  PAYMENT_TYPE VARCHAR(500) NOT NULL,
  CUSTOMER_PHONE_NUMBER VARCHAR(500),
  LATEST_PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_EFFECTIVE_DATE DATE NOT NULL,
  PAYMENT_CANCELLATION_DATE DATE NOT NULL,
  MAC_ADDRESS VARCHAR(500),
  TOTAL_APPLIED_AMOUNT INTEGER NOT NULL,
  NET_APPLIED_AMOUNT INTEGER NOT NULL,
  TOTAL_UNAPPLIED_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY (
  PAYMENT_GATEWAY_STATUS VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_COMMENT_TEXT VARCHAR(500),
  SYSTEM_CREDENTIAL VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS CAPTURE_PAYMENT (
  CAPTURE_PAYMENT_ID VARCHAR(36) UNIQUE NOT NULL,
  ID VARCHAR(500) NOT NULL,
  NAME VARCHAR(500),
  CAPTURE_PAYMENT_TYPE VARCHAR(500) NOT NULL,
  HANDLING_FEE_AMOUNT INTEGER,
  IS_FINAL_CAPTURE BOOLEAN,
  PAYMENT_STATUS VARCHAR(500) NOT NULL,
  AUTHORIZATION_PROCESSING_MODE VARCHAR(500) NOT NULL,
  I_PADDRESS VARCHAR(500),
  COMMENT_TEXT VARCHAR(500) NOT NULL,
  PAYMENT_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_RESULT VARCHAR(500) NOT NULL,
  CUSTOMER_EMAIL_ADDRESS VARCHAR(500),
  LATEST_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  LATEST_GATEWAY_DATE DATE NOT NULL,
  BALANCE_AMOUNT INTEGER NOT NULL,
  PAYMENT_TYPE VARCHAR(500) NOT NULL,
  CUSTOMER_PHONE_NUMBER VARCHAR(500),
  LATEST_PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_EFFECTIVE_DATE DATE NOT NULL,
  EXTERNAL_CREATED_DATE DATE NOT NULL,
  PAYMENT_CANCELLATION_DATE DATE NOT NULL,
  MAC_ADDRESS VARCHAR(500),
  TOTAL_APPLIED_AMOUNT INTEGER NOT NULL,
  NET_APPLIED_AMOUNT INTEGER NOT NULL,
  TOTAL_UNAPPLIED_AMOUNT INTEGER NOT NULL,
  LATEST_GATEWAY_INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PAYMENT_GATEWAY_INTERACTION_LOG (
  PAYMENT_GATEWAY_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_MESSAGE_TEXT VARCHAR(500),
  PAYMENT_GATEWAY_AUTHORIZATION_CODE VARCHAR(500) NOT NULL,
  INTERNAL_RESULT_CODE VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_AV_SCODE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  INTERNAL_REFERENCE_NUMBER VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_LOG_NAME VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_STATUS VARCHAR(500) NOT NULL,
  PAYMENT_GATEWAY_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS BILLING_FREQUENCY (
  ID VARCHAR(36) UNIQUE NOT NULL,
  BILLING_FREQUENCY_NAME VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ACCOUNT_CONTACT_ROLE (
  ACCOUNT_CONTACT_ROLE_TYPE VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE DATE,
  ACTIVE_TO_DATE DATE
);

CREATE TABLE IF NOT EXISTS ACCOUNT_CONTACT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DEPARTMENT_NAME VARCHAR(500),
  ASSISTANT_PHONE VARCHAR(500),
  TITLE VARCHAR(500),
  LAST_ACTIVITY_DATE DATE,
  CONTACT_NOTE VARCHAR(500),
  ASSISTANT_NAME VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS ACCOUNT_PARTNER (
  ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS ACCOUNT (
  BILL_DELIVERY_METHOD VARCHAR(500),
  USE_AS_SALES_ACCOUNT BOOLEAN NOT NULL,
  ASSIGN_TERRITORY_FLAG BOOLEAN,
  AUTO_PAY_ENABLED_FLAG BOOLEAN,
  AUTO_PAYMENT_AMOUNT INTEGER,
  USE_AS_SERVICE_ACCOUNT BOOLEAN NOT NULL,
  USE_AS_BILLING_ACCOUNT BOOLEAN NOT NULL,
  DESCRIPTION VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  S_LA_EXPIRATION_DATE DATE,
  NAME VARCHAR(500) NOT NULL,
  ACCOUNT_TYPE VARCHAR(500),
  BALANCE_AMOUNT INTEGER,
  HOLD_STATUS_REASON VARCHAR(500),
  GENERAL_LEDGER_ACCOUNT VARCHAR(500),
  THIRTY_DAY_BALANCE_AMOUNT INTEGER,
  SIXTY_DAY_BALANCE_AMOUNT INTEGER,
  USE_AS_SHIPPING_ACCOUNT BOOLEAN NOT NULL,
  S_LA_TYPE VARCHAR(500),
  BALANCE_AMOUNT_LIMIT INTEGER,
  LAST_ACTIVITY_DATE DATE,
  NUMBER VARCHAR(500) NOT NULL,
  NINETY_DAY_BALANCE_AMOUNT INTEGER,
  PAYMENT_TERM VARCHAR(500) NOT NULL,
  DEFAULT_FREIGHT_TERMS VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS LEAD (
  STATE_PROVINCE_NAME VARCHAR(500),
  LEAD_STATUS VARCHAR(500),
  PHOTO_UR_L VARCHAR(500),
  COUNTRY_NAME VARCHAR(500),
  CONVERTED_DATE DATE,
  DESCRIPTION VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  COMPANY_NAME VARCHAR(500),
  STREET_NAME VARCHAR(500),
  LEAD_SCORE INTEGER,
  GEO_CODE_LATITUDE INTEGER,
  LEAD_RATING VARCHAR(500),
  GEO_CODE_LONGITUDE INTEGER,
  EMAIL_BOUNCED_DATE TIME,
  GEO_CODE_ACCURACY INTEGER,
  LEAD_SOURCE VARCHAR(500) NOT NULL,
  LAST_ACTIVITY_DATE DATE,
  ANNUAL_REVENUE INTEGER,
  EMAIL_BOUNCED_REASON VARCHAR(500),
  WEBSITE VARCHAR(500),
  IS_CONVERTED BOOLEAN
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_DELIVERY_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_REASON_CATEGORY (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS RENEWAL_TERM (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_CHANNEL_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER (
  TOTAL_PENDING_BILLING_AMOUNT INTEGER,
  CHECKOUT_DATE DATE,
  PRICE_CALCULATION_STATUS_MESSAGE_TEXT VARCHAR(500),
  CONFIRMATION_RECIPIENT_EMAIL_TEXT VARCHAR(500) NOT NULL,
  ORDER_END_DATE DATE,
  IS_TAX_EXEMPT BOOLEAN,
  TOTAL_PRODUCT_TAX_AMOUNT INTEGER,
  IS_ALERTED BOOLEAN,
  IS_ANONYMOUS BOOLEAN,
  DESCRIPTION VARCHAR(500) NOT NULL,
  ACTIVATED_DATE DATE,
  REQUESTED_START_DATE DATE NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  COMPANY_AUTHORIZED_DATE DATE,
  ORDER_INSURANCE_AMOUNT INTEGER,
  NAME VARCHAR(500) NOT NULL,
  IS_CLOSED BOOLEAN,
  TOTAL_DELIVERY_AMOUNT INTEGER,
  CUSTOMER_AUTHORIZED_DATE DATE,
  TOTAL_CANCELLED_BILLING_AMOUNT INTEGER,
  TOTAL_ADJUSTED_DELIVERY_TAX_AMOUNT INTEGER,
  TOTAL_ADJUSTMENT_AMOUNT INTEGER,
  RENEWAL_UPLIFT_RATE INTEGER,
  TOTAL_PRODUCT_AMOUNT INTEGER,
  TOTAL_ADJUSTMENT_TAX_AMOUNT INTEGER,
  IS_GIFT_ORDER BOOLEAN,
  PROMISE_FULFILLMENT_DATE DATE,
  FILED_DATE DATE,
  I_SO_CULTURE VARCHAR(500),
  PURCHASE_ORDER_NUMBER VARCHAR(500),
  TOTAL_DELIVERY_FEE_AMOUNT INTEGER,
  TOTAL_DELIVERY_TAX_AMOUNT INTEGER,
  TOTAL_TAX_AMOUNT INTEGER,
  ORDER_NUMBER VARCHAR(500) NOT NULL,
  FULFILLED_DATE DATE,
  PAID_DATE DATE,
  TOTAL_BOOKING_AMOUNT INTEGER,
  ADJUSTED_PRODUCT_TAX_AMOUNT INTEGER,
  PROMISE_DATE DATE,
  PACKED_DATE DATE,
  IS_HISTORICAL_ONLY BOOLEAN,
  GRAND_TOTAL_AMOUNT INTEGER,
  IS_CONTRACTED BOOLEAN,
  CAN_BILL_NOW BOOLEAN,
  ADJUSTED_TOTAL_PRODUCT_AMOUNT INTEGER,
  ORDER_DISCOUNT INTEGER,
  ORDER_START_DATE DATE,
  CANCEL_DATE_TYPE VARCHAR(500),
  IS_REDUCTION_ORDER BOOLEAN,
  SALES_ORDER_SYSTEM_STATUS VARCHAR(500),
  IS_SUSPENDED BOOLEAN,
  PURCHASE_ORDER_DATE DATE,
  BILLING_DAY_OF_THE_MONTH INTEGER,
  CANCEL_DATE DATE,
  TAX_RATE INTEGER,
  DEVELOPER_STATUS_CODE VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PAYMENT_SUMMARY (
  AUTHORIZATION_REVERSAL_AMOUNT INTEGER,
  AUTHORIZATION_AMOUNT INTEGER,
  UNAPPLIED_AMOUNT INTEGER,
  PAYMENT_AMOUNT INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  APPLIED_AMOUNT INTEGER,
  AVAILABLE_TO_APPLY_BALANCE_AMOUNT INTEGER,
  CAPTURED_AMOUNT INTEGER
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRICE_ADJUSTMENT_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_TAX (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  SALES_ORDER_TAX_AMOUNT INTEGER,
  TAX_ADDRESS_CITY_NAME VARCHAR(500),
  TAX_ERROR_MESSAGE_TEXT VARCHAR(500),
  TAX_ADDRESS_STREET1_TEXT VARCHAR(500),
  TAX_RATE_PERCENT INTEGER NOT NULL,
  TAX_ADDRESS_STREET2_TEXT VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_NOTE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NOTE_TEXT VARCHAR(500) NOT NULL,
  DESCRIPTION VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT (
  TOTAL_RECURRING_PRICE_AMOUNT INTEGER,
  TOTAL_LINE_ADJUSTMENT_AMOUNT INTEGER,
  TOTAL_PRICE_AMOUNT INTEGER NOT NULL,
  PROVISIONING_DATE DATE,
  FULFILLED_QUANTITY INTEGER,
  TOTAL_LINE_AMOUNT INTEGER,
  PROMISED_DATE DATE,
  RECURRING_PRICE_AMOUNT INTEGER,
  END_DATE DATE,
  GIFT_ORDER_MESSAGE_TEXT VARCHAR(500),
  QUANTITY_ORDERED_UO_M VARCHAR(500) NOT NULL,
  TOTAL_PRODUCT_TAX_AMOUNT INTEGER,
  LINE_ADJUSTMENT_SUB_TOTAL_AMOUNT INTEGER,
  COMMENT_TEXT VARCHAR(500),
  ORDER_PRODUCT_NUMBER VARCHAR(500) NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  ORDERED_QUANTITY INTEGER NOT NULL,
  UNIT_PRICE_AMOUNT INTEGER,
  REQUESTED_START_DATE DATE,
  ID VARCHAR(36) UNIQUE NOT NULL,
  SUBSCRIPTION_RENEWAL_MONTH_QUANTITY INTEGER,
  ORDER_MANUAL_ADJUSTMENT_SUB_TOTAL_AMOUNT INTEGER,
  ALLOCATED_QUANTITY INTEGER,
  ALLOCATION_PARTITION_NAME VARCHAR(500),
  IS_GIFT BOOLEAN,
  UNIT_TAX_AMOUNT INTEGER,
  DELIVERY_TAX_AMOUNT INTEGER,
  IS_BONUS_PRODUCT BOOLEAN,
  SALES_ORDER_PRODUCT_ADJUSTED_TAX_AMOUNT INTEGER,
  TOTAL_ADJUSTMENT_AMOUNT INTEGER,
  SHIPPING_TAX_AMOUNT INTEGER,
  TOTAL_LIST_PRICE_AMOUNT INTEGER,
  TOTAL_ADJUSTMENT_TAX_AMOUNT INTEGER,
  ORDER_ADJUSTMENT_SUB_TOTAL_AMOUNT INTEGER,
  SUBSCRIPTION_TERM_QUANTITY INTEGER,
  TOTAL_DISTRIBUTED_ADJUSTMENT_TAX_AMOUNT INTEGER,
  TOTAL_DISTRIBUTED_TAX_AMOUNT INTEGER,
  TOTAL_TAX_AMOUNT INTEGER,
  ADJUSTED_DELIVERY_TAX_AMOUNT INTEGER,
  LIST_PRICE_AMOUNT INTEGER,
  SEGMENT_INDEX INTEGER,
  SHIPPING_COST_AMOUNT INTEGER,
  IS_BUNDLE_ROOT BOOLEAN,
  DISCOUNT_AMOUNT INTEGER,
  CANCELLED_QUANTITY INTEGER,
  LIST_PRICE_QUANTITY_UO_M VARCHAR(500) NOT NULL,
  TOTAL_DISTRIBUTED_ADJUSTMENT_AMOUNT INTEGER,
  SEGMENT_INDEX_NUMBER INTEGER,
  TOTAL_UNIT_PRICE_AMOUNT INTEGER,
  AVAILABLE_QUANTITY INTEGER,
  REQUESTED_END_DATE DATE,
  ALLOCATION_GROUP_NAME VARCHAR(500),
  GIFT_RECIPIENT_TELEPHONE_NUMBER VARCHAR(500),
  IS_AUTOMATICALLY_RENEWED BOOLEAN,
  DISCOUNT_PERCENT INTEGER,
  TOTAL_MANUAL_ADJUSTMENT_AMOUNT INTEGER,
  HANDLING_COST_AMOUNT INTEGER
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRICE_ADJUSTMENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  TOTAL_ADJUSTMENT_TAX_AMOUNT INTEGER
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_GROUP (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_RELATIONSHIP_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARENT_PRODUCT_ROLE VARCHAR(500) NOT NULL,
  CHILD_PRODUCT_ROLE VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_GROUP_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_CONFIRMATION_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_CHANGE_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  SALES_ORDER_CHANGE_TYPE_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRICE_ADJUSTMENT_METHOD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_REASON (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDER_DELIVERY_METHOD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  EXTERNAL_RECORD VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_CHANGE_LOG (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_TAX (
  DESCRIPTION VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  TAX_EFFECTIVE_DATE DATE,
  TAX_AMOUNT INTEGER NOT NULL,
  SALES_ORDER_TAX_AMOUNT INTEGER,
  TAX_ADDRESS_CITY_NAME VARCHAR(500),
  TAX_ERROR_MESSAGE_TEXT VARCHAR(500),
  TAX_ADDRESS_STREET1_TEXT VARCHAR(500),
  TAX_RATE_PERCENT INTEGER NOT NULL,
  TAX_ADDRESS_STREET2_TEXT VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PRICE_ADJUSTMENT_GROUP (
  PRICE_ADJUSTMENT_GROUP_ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_DELIVERY_GROUP (
  TOTAL_PRICE_AMOUNT INTEGER NOT NULL,
  TOTAL_DELIVERY_ADJUSTMENT_TAX_AMOUNT INTEGER,
  PROMISED_DATE DATE,
  GIFT_MESSAGE_TEXT VARCHAR(500),
  DELIVERY_INSTRUCTIONS_TEXT VARCHAR(500),
  TOTAL_PRODUCT_TAX_AMOUNT INTEGER,
  TOTAL_DELIVERY_CHARGE_AMOUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  GRAND_TOTAL_DELIVERY_AMOUNT INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  IS_GIFT BOOLEAN,
  TOTAL_DELIVERY_ADJUSTMENT_AMOUNT INTEGER,
  TOTAL_DELIVERY_TAX_AMOUNT INTEGER,
  TOTAL_TAX_AMOUNT INTEGER,
  TOTAL_DELIVERY_CHARGE_TAX_AMOUNT INTEGER,
  SALES_ORDER_DELIVERY_GROUP_NUMBER VARCHAR(500) NOT NULL,
  DESIRED_DELIVERY_DATE DATE,
  TOTAL_UNIT_PRICE_AMOUNT INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_PRODUCT_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_ORDER_SEGMENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS SALES_CHANNEL (
  EXTERNAL_RECORD VARCHAR(500) NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  SALES_CHANNEL_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ATTRIBUTE_VALUE (
  ATTRIBUTE_VALUE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS DEVICE_USER_SESSION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_COLLATERAL (
  ID VARCHAR(36) UNIQUE NOT NULL,
  U_RL VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ATTRIBUTE_TRANSLATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  TRANSLATED_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_VALIDITY_TIME_PERIOD_UO_M (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PLURAL_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_ATTRIBUTE_SET (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ATTRIBUTE_SET VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_ATTRIBUTE_VALUE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  CUSTOM_ATTRIBUTE_VALUE VARCHAR(500),
  NAME VARCHAR(500) NOT NULL,
  ATTRIBUTE_SET VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS ATTRIBUTE_SET_TRANSLATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ATTRIBUTE_SET VARCHAR(500) NOT NULL,
  TRANSLATED_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRICE_BOOK_ENTRY (
  MIN_REQUIRED_QUANTITY INTEGER,
  UNIT_LIST_PRICE INTEGER,
  MIN_REQUIRED_ORDER_VALUE INTEGER,
  IS_ACTIVE BOOLEAN,
  ID VARCHAR(36) UNIQUE NOT NULL,
  MAX_REQUIRED_ORDER_VALUE INTEGER,
  USE_STANDARD_PRICE BOOLEAN,
  SERVICE_PERIOD_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS ATTRIBUTE_VALUE_TRANSLATION (
  TRANSLATED_ATTRIBUTE_VALUE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  TRANSLATED_ATTRIBUTE_VALUE_DESCRIPTION VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS UNCATEGORIZED_PARTY (
  CREATION_REASON VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  UNCATEGORIZED_PARTY_LABEL VARCHAR(500) NOT NULL,
  ORIGINAL_SOURCE_RECORD VARCHAR(500),
  ORIGINAL_SOURCE_SYSTEM VARCHAR(500),
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PERSON_LANGUAGE (
  SPOKEN_PROFICIENCY_LEVEL VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  WRITTEN_PROFICIENCY_LEVEL VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PERSON_EDUCATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  EDUCATION_LEVEL VARCHAR(500) NOT NULL,
  EDUCATION_NAME VARCHAR(500) NOT NULL,
  GRADUATION_DATE DATE NOT NULL,
  INSTITUTION_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS INDIVIDUAL (
  HAS_ALCOHOL_ABUSE_HISTORY BOOLEAN,
  HIGHEST_EDUCATION_LEVEL VARCHAR(500),
  PERSON_HEIGHT INTEGER,
  MAILING_NAME VARCHAR(500),
  SURGERIES_LAST5_YEARS_COUNT INTEGER,
  DO_NOT_TRACK_UPDATE_DATE DATE,
  WEDDING_ANNIVERSARY_DATE DATE,
  MINOR_CITATION_COUNT INTEGER,
  MAIN_DIETARY_HABIT_TYPE VARCHAR(500),
  PERSON_HEIGHT_UNIT_OF_MEASURE VARCHAR(500),
  FIRST_NAME VARCHAR(500),
  PERSON_NAME VARCHAR(500) NOT NULL,
  PHOTO_UR_L VARCHAR(500),
  IS_HIGH_RISK_HOBBY BOOLEAN,
  DO_NOT_PROCESS_FROM_UPDATE_DATE DATE,
  MILITARY_SERVICE VARCHAR(500),
  MARITAL_STATUS VARCHAR(500),
  DO_NOT_MARKET_FROM_UPDATE_DATE DATE,
  SHOULD_FORGET BOOLEAN,
  ID VARCHAR(36) UNIQUE NOT NULL,
  MAIN_DISABILITY_TYPE VARCHAR(500),
  CONSUMER_CREDIT_SCORE_PROVIDER_NAME VARCHAR(500),
  IS_TOBACCO_CONSUME BOOLEAN,
  WEB_SITE_UR_L VARCHAR(500),
  SECOND_LAST_NAME VARCHAR(500),
  ORDERING_NAME VARCHAR(500),
  HOSPITALIZATIONS_LAST5_YEARS_COUNT INTEGER,
  DEPENDENT_COUNT INTEGER,
  CONVICTIONS_COUNT INTEGER,
  IS_GOOD_DRIVER BOOLEAN,
  PRIMARY_HOBBY VARCHAR(500),
  MAIN_PERSONAL_VALUE_TYPE VARCHAR(500),
  IS_ALCOHOL_CONSUMER BOOLEAN,
  TAX_BRACKET_RANGE VARCHAR(500),
  CHILDREN_COUNT INTEGER,
  IS_GOOD_STUDENT BOOLEAN,
  MAIN_LIFE_ATTITUDE_TYPE VARCHAR(500),
  NET_WORTH INTEGER,
  PERSON_WEIGHT INTEGER,
  BIRTH_DATE DATE,
  RELIGION VARCHAR(500),
  SEND_INDIVIDUAL_DATA BOOLEAN,
  DEATH_DATE DATE,
  DO_EXTRACT_MY_DATA_UPDATE_DATE DATE,
  BIRTH_PLACE VARCHAR(500),
  OVER_AGE_NUMBER INTEGER,
  DO_FORGET_ME_FROM_UPDATE_DATE DATE,
  PERSON_WEIGHT_UNIT_OF_MEASURE VARCHAR(500),
  MAIN_LIFE_STYLE_TYPE VARCHAR(500),
  GENDER VARCHAR(500),
  HAS_DRUG_ABUSE_HISTORY BOOLEAN,
  SALUTATION VARCHAR(500),
  MOTHERS_MAIDEN_NAME VARCHAR(500),
  DO_NOT_TRACK_LOCATION_UPDATE_DATE DATE,
  ETHNICITY VARCHAR(500),
  MAIN_PERSONALITY_TYPE VARCHAR(500),
  EMPLOYED_SINCE_DATE DATE,
  OFFICIAL_NAME VARCHAR(500),
  IS_HIGH_RISK_OCCUPATION BOOLEAN,
  RESIDENCE_CAPTURE_METHOD VARCHAR(500),
  DO_NOT_PROFILE_FROM_UPDATE_DATE DATE,
  NAME_SUFFIX VARCHAR(500),
  IS_DRUG_CONSUMER BOOLEAN,
  IS_HOME_OWNER BOOLEAN,
  DO_NOT_PROCESS_REASON VARCHAR(500),
  OCCUPATION_TYPE VARCHAR(500),
  DEATH_PLACE VARCHAR(500),
  INFLUENCER_RATING INTEGER,
  MILITARY_STATUS VARCHAR(500),
  CONSUMER_CREDIT_SCORE INTEGER,
  YEARLY_INCOME INTEGER,
  PREFERRED_NAME VARCHAR(500),
  PERSON_LIFE_STAGE VARCHAR(500),
  YEARLY_INCOME_RANGE VARCHAR(500),
  MAJOR_CITATION_COUNT INTEGER,
  MIDDLE_NAME VARCHAR(500),
  RESIDENCE_COUNTRY_NAME VARCHAR(500),
  LAST_NAME VARCHAR(500),
  OCCUPATION VARCHAR(500),
  CURRENT_EMPLOYER_NAME VARCHAR(500),
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PERSON_EMPLOYMENT (
  EMPLOYMENT_STATUS VARCHAR(500) NOT NULL,
  POSITION_TEXT VARCHAR(500) NOT NULL,
  EMPLOYER_ADDRESS_LINE3 VARCHAR(500),
  END_DATE DATE NOT NULL,
  START_DATE DATE NOT NULL,
  OCCUPATION_TEXT VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  EMPLOYER_NAME VARCHAR(500) NOT NULL,
  EMPLOYER_ADDRESS_LINE4 VARCHAR(500),
  EMPLOYER_ADDRESS_LINE1 VARCHAR(500) NOT NULL,
  ANNUAL_INCOME INTEGER NOT NULL,
  EMPLOYER_CITY_NAME VARCHAR(500),
  EMPLOYER_ADDRESS_LINE2 VARCHAR(500),
  EMPLOYER_POSTAL_CODE_TEXT VARCHAR(500),
  EMPLOYER_PHONE_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY_IDENTIFICATION (
  EXPIRY_DATE DATE,
  PARTY_IDENTIFICATION_TYPE VARCHAR(500) NOT NULL,
  VERIFIED_DATE DATE,
  ISSUED_BY_AUTHORITY VARCHAR(500),
  ISSUED_AT_LOCATION VARCHAR(500),
  ISSUED_DATE DATE,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  IDENTIFICATION_NUMBER VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY_RELATED_PARTY (
  RELATED_FROM_DATE DATE NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  RELATED_TO_DATE DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY_ADDITIONAL_NAME (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ADDITIONAL_NAME_TYPE VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY_RELATIONSHIP_TYPE (
  IS_BIDIRECTIONAL BOOLEAN NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARTY_ROLE VARCHAR(500) NOT NULL,
  RELATED_PARTY_ROLE VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS HOUSEHOLD (
  HOUSEHOLD_MEMBER_COUNT INTEGER,
  HOUSEHOLD_FORMED_DATE DATE,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  HOUSEHOLD_DISSOLVED_DATE DATE,
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PERSON_LIFE_EVENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PERSON_LIFE_EVENT_DATE_TIME TIME NOT NULL,
  PERSON_LIFE_EVENT_TYPE VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTY (
  PARTY_TYPE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS INTERNAL_BUSINESS_UNIT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  BUSINESS_UNIT_TYPE VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS SUPPLIER (
  SATISFACTION_ETHICS_RANK INTEGER,
  CONTRACT_INVOICE_ACCURACY_RATE INTEGER,
  SATISFACTION_WEIGHT_PERCENT INTEGER,
  CONTRACT_ON_TIME_DELIVERY_RATE INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  COMPETITIVE_WARRANTY_RANK INTEGER,
  COMPETITIVE_MARKETING_RANK INTEGER,
  CONTRACT_DELIVERY_CORRECTNESS_RATE INTEGER,
  COMPETITIVE_WEIGHT_SCORE INTEGER,
  CONTRACT_SL_AISSUE_RATE INTEGER,
  COMPETITIVE_WEIGHT_PERCENT INTEGER,
  SUPPLIER_SCORE INTEGER,
  COMPETITIVE_PRODUCT_PRICE_RANK INTEGER,
  CONTRACT_WEIGHT_PERCENT INTEGER,
  SUPPLIER_SPEND INTEGER,
  SATISFACTION_TECHNICAL_SUPPORT_RANK INTEGER,
  CONTRACT_WEIGHT_SCORE INTEGER,
  SATISFACTION_CUSTOMER_SERVICE_RANK INTEGER,
  SATISFACTION_WEIGHT_SCORE INTEGER,
  CONTRACT_SOURCING_CYCLE_DAYS INTEGER,
  SUPPLIER_TYPE VARCHAR(500),
  IS_CARRIER BOOLEAN,
  CONTRACT_PRODUCT_RETURN_RATE INTEGER,
  COMPETITIVE_COST_AVOIDANCE_RANK INTEGER,
  CONTRACT_PRODUCT_QUALITY_RATE INTEGER,
  CONTRACT_BUDGET_COST_RATE INTEGER
);

CREATE TABLE IF NOT EXISTS CUSTOMER_STATUS_HISTORY (
  START_DATE_TIME TIME NOT NULL,
  PARTY_ROLE_STATUS VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  END_DATE_TIME TIME NOT NULL
);

CREATE TABLE IF NOT EXISTS COMPETITOR (
  COMPETITOR_STRENGTHS VARCHAR(500),
  COMPETITOR_FROM_DATE DATE NOT NULL,
  SOCIAL_MEDIA_POST_RATE INTEGER,
  COMPETITOR_THREATS VARCHAR(500),
  CURRENT_RATIO INTEGER,
  CASH_FLOW_GROWTH INTEGER,
  COMPETITOR_OBJECTIVES VARCHAR(500),
  NET_PROFIT_MARGIN INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  COMPETITOR_WEAKNESSES VARCHAR(500),
  PRESS_MENTIONS_RATE INTEGER,
  ASSET_TURNOVER_RATIO INTEGER,
  COMPETITOR_TO_DATE DATE,
  COMPETITOR_LEVERAGE_OPPORTUNITIES VARCHAR(500),
  ASSET_RETURN_RATIO INTEGER,
  PTO_ENUMBER INTEGER,
  AD_KEYWORDS VARCHAR(500),
  AD_REACH_RATE INTEGER
);

CREATE TABLE IF NOT EXISTS SELLER (
  COMMUNITY_PARTICIPATION_COUNT INTEGER,
  DEMONSTRATIONS_GIVEN_COUNT INTEGER,
  EVENT_PARTICIPATION_COUNT INTEGER,
  CUSTOMER_SATISFACTION_SCORE INTEGER,
  TRAINING_CERTIFICATION_COUNT INTEGER,
  OPPORTUNITY_INVOLVEMENT_COUNT INTEGER,
  MARKETING_DEVELOPMENT_AMOUNT INTEGER,
  SELLER_TYPE VARCHAR(500),
  DOCUMENTATION_DOWNLOAD_COUNT INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  TRIAL_PARTICIPATION_COUNT INTEGER,
  CREDIT_RATING INTEGER,
  SATISFACTION_SCORE INTEGER,
  SALES_AMOUNT INTEGER,
  OPPORTUNITY_WIN_RATE INTEGER,
  PRODUCT_RETURN_RATE INTEGER,
  LEAD_GENERATION_COUNT INTEGER,
  INVENTORY_VALUE_AMOUNT INTEGER,
  MAJOR_POST_SALE_SUPPORT_NEEDED BOOLEAN,
  TRAINING_PARTICIPATION_COUNT INTEGER,
  NEW_CUSTOMER_ACQUISITION_COUNT INTEGER,
  SUCCESS_STORY_COUNT INTEGER,
  SYSTEM_LOGIN_COUNT INTEGER,
  JOINT_BUSINESS_PLAN_EXIST BOOLEAN,
  AVERAGE_CONVERTED_LEAD_AMOUNT INTEGER,
  ESTIMATED_PARTNER_GROSS_MARGIN INTEGER
);

CREATE TABLE IF NOT EXISTS CUSTOMER (
  CUSTOMER_STATUS VARCHAR(500) NOT NULL,
  PROSPECT_RATING VARCHAR(500),
  NET_PROMOTER_SCORE INTEGER,
  CUSTOMER_SATISFACTION_SCORE INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  MARKETING_EMAIL_RESPONSE_RATE INTEGER,
  TOTAL_CONTRACTED_AMOUNT INTEGER,
  TOTAL_PROFIT_CONTRIBUTION_AMOUNT INTEGER,
  CUSTOMER_NUMBER VARCHAR(500),
  CHURN_SCORE INTEGER,
  ORIGINATING_CUSTOMER_SOURCE VARCHAR(500),
  TOTAL_LIFE_TIME_VALUE INTEGER,
  TOTAL_BOOKINGS_AMOUNT INTEGER,
  LAST24_MONTHS_NEW_REVENUE_AMOUNT INTEGER,
  LAST12_MONTHS_NEW_REVENUE_AMOUNT INTEGER,
  LAST12_MONTHS_SUPPORT_CALL_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS PARTY_ROLE (
  ID VARCHAR(36) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_RELATED_PRODUCT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  IS_DEFAULT_OPTION BOOLEAN NOT NULL,
  FROM_DATE DATE NOT NULL,
  TO_DATE DATE
);

CREATE TABLE IF NOT EXISTS PRODUCT_TRANSLATION (
  LONG_DESCRIPTION VARCHAR(500),
  DESCRIPTION VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_IMAGE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  IS_DEFAULT_IMAGE BOOLEAN NOT NULL,
  IMAGE_VIEW_TYPE VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS PRODUCT_RELATIONSHIP_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARENT_PRODUCT_ROLE VARCHAR(500) NOT NULL,
  CHILD_PRODUCT_ROLE VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_IMAGE_TRANSLATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  TRANSLATED_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS GOODS_PRODUCT (
  PRODUCT_SECURITY_REQUIREMENT VARCHAR(500),
  SEASON VARCHAR(500),
  COLOR VARCHAR(500),
  STYLE VARCHAR(500),
  IS_MADE_TO_ORDER BOOLEAN NOT NULL,
  HEIGHT INTEGER,
  FABRIC VARCHAR(500),
  REQUIRED_TEMPERATURE_UO_M VARCHAR(500),
  SHELF_FACING_UNIT_COUNT INTEGER,
  REQUIRED_HUMIDITY_PERCENTAGE INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  GROSS_WEIGHT INTEGER,
  TARE_WEIGHT INTEGER,
  DEPTH INTEGER,
  REQUIRED_TEMPERATURE_LOWEST_NUMBER INTEGER,
  GENDER VARCHAR(500),
  MAX_HOLDING_DAY_COUNT INTEGER,
  DIAMETER INTEGER,
  IS_PERISHABLE BOOLEAN NOT NULL,
  REQUIRED_CLEANUP_PROCESS VARCHAR(500),
  PATTERN VARCHAR(500),
  REQUIRED_TEMPERATURE_HIGHEST_NUMBER INTEGER,
  NET_WEIGHT INTEGER,
  ENVIRONMENT_REQUIREMENT VARCHAR(500),
  DRAINED_WEIGHT INTEGER,
  AGE VARCHAR(500),
  WIDTH INTEGER,
  REQUIRES_UNIT_PRICE_LABEL BOOLEAN NOT NULL,
  WEIGHT_UO_M VARCHAR(500),
  PRODUCT_MAY_EXPAND BOOLEAN NOT NULL,
  SIZE_UO_M VARCHAR(500),
  QUANTITY_SCHEDULE_TYPE VARCHAR(500),
  DISPOSAL_TYPE VARCHAR(500),
  LONG_DESCRIPTION VARCHAR(500) NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT INTEGER,
  IS_BACK_ORDERED BOOLEAN NOT NULL,
  VALID_FOR_PERIOD_COUNT INTEGER,
  IS_WORKER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  ALLOW_PARTIAL_REFUND BOOLEAN,
  IS_WEIGHT_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_QUANTITY_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_SERIALIZED BOOLEAN NOT NULL,
  REWARD_PROGRAM_POINTS_COUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  REVENUE_INSTALLMENT_PERIOD VARCHAR(500),
  NAME VARCHAR(500) NOT NULL,
  IS_AUTO_PROVISIONABLE BOOLEAN NOT NULL,
  IS_COUPON_REDEMPTION_ALLOWED BOOLEAN NOT NULL,
  IS_SELLABLE_INDEPENDENTLY BOOLEAN NOT NULL,
  CAN_USE_REVENUE_SCHEDULE BOOLEAN NOT NULL,
  MANUFACTURER_NAME VARCHAR(500),
  IS_INTELLECTUAL_PROPERTY_PROTECTED BOOLEAN,
  MODEL_YEAR INTEGER,
  IS_CUSTOMER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  PRODUCT_STATUS VARCHAR(500) NOT NULL,
  BRAND_GRADE VARCHAR(500),
  QUANTITY_INSTALLMENT_COUNT INTEGER,
  REQUIRED_DEPOSIT_AMOUNT INTEGER,
  REVENUE_SCHEDULE_TYPE VARCHAR(500),
  IS_PRE_ORDERABLE BOOLEAN NOT NULL,
  REQUIRES_INVIDIDUAL_UNIT_PRICING BOOLEAN NOT NULL,
  STANDARD_WARRANTY_LENGTH_MONTH INTEGER,
  CAN_USE_QUANTITY_SCHEDULE BOOLEAN NOT NULL,
  IS_INSTALLABLE BOOLEAN NOT NULL,
  IS_RAIN_CHECK_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT_START_DATE INTEGER,
  MAXIMUM_ORDER_QUANTITY_COUNT INTEGER,
  IS_MULTIPLE_COUPONS_ALLOWED BOOLEAN NOT NULL,
  ALLOW_CUSTOMER_RETURN BOOLEAN,
  MODEL_NUMBER VARCHAR(500),
  M_SR_PAMOUNT INTEGER,
  EXTERNAL_SOURCE_RECORD VARCHAR(500),
  IS_SELLABLE BOOLEAN,
  VALID_TO_DATE DATE,
  PRICE_CHARGE_TYPE VARCHAR(500) NOT NULL,
  IS_PARTNER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  REVENUE_INSTALLMENT_COUNT INTEGER,
  PRODUCT_SK_U VARCHAR(500) NOT NULL,
  QUANTITY_INSTALLMENT_PERIOD VARCHAR(500),
  IS_MANUAL_PRICE_ENTRY_REQUIRED BOOLEAN NOT NULL,
  TYPE VARCHAR(500),
  IS_SELLABLE_WITHOUT_PRICE BOOLEAN NOT NULL,
  GL_ACCOUNT_CODE VARCHAR(500),
  IS_RETURNABLE BOOLEAN NOT NULL,
  DISPLAY_URL VARCHAR(500),
  VERSION_NUMBER VARCHAR(500),
  LOT_IDENTIFIER VARCHAR(500),
  VALID_FROM_DATE DATE,
  STOCK_LEDGER_VALUATION_AMOUNT INTEGER,
  IS_DYNAMIC_BUNDLE BOOLEAN NOT NULL,
  IS_QUALITY_VERIFICATION_REQUIRED BOOLEAN NOT NULL,
  REQUIRED_DEPOSIT_PERCENTAGE INTEGER,
  IS_FOODSTAMP_PAYMENT_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ORDER_QUANTITY_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS SERVICE_PRODUCT (
  RENTAL_TERM_VIOLATION_PENALTY_AMOUNT INTEGER,
  EVERGREEN_CONTRACT_ESTIMATED_MONTH_COUNT INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  EVERGREEN_CONTRACT_ESTIMATED_CHARGE_AMOUNT INTEGER,
  SERVICE_PERIOD_UO_M VARCHAR(500),
  SERVICE_PERIOD_COUNT INTEGER,
  RENTAL_CLEANUP_FEE_AMOUNT INTEGER,
  SERVICE_TYPE VARCHAR(500) NOT NULL,
  QUANTITY_SCHEDULE_TYPE VARCHAR(500),
  DISPOSAL_TYPE VARCHAR(500),
  LONG_DESCRIPTION VARCHAR(500) NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT INTEGER,
  IS_BACK_ORDERED BOOLEAN NOT NULL,
  VALID_FOR_PERIOD_COUNT INTEGER,
  IS_WORKER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  ALLOW_PARTIAL_REFUND BOOLEAN,
  IS_WEIGHT_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_QUANTITY_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_SERIALIZED BOOLEAN NOT NULL,
  REWARD_PROGRAM_POINTS_COUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  REVENUE_INSTALLMENT_PERIOD VARCHAR(500),
  NAME VARCHAR(500) NOT NULL,
  IS_AUTO_PROVISIONABLE BOOLEAN NOT NULL,
  IS_COUPON_REDEMPTION_ALLOWED BOOLEAN NOT NULL,
  IS_SELLABLE_INDEPENDENTLY BOOLEAN NOT NULL,
  CAN_USE_REVENUE_SCHEDULE BOOLEAN NOT NULL,
  MANUFACTURER_NAME VARCHAR(500),
  IS_INTELLECTUAL_PROPERTY_PROTECTED BOOLEAN,
  MODEL_YEAR INTEGER,
  IS_CUSTOMER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  PRODUCT_STATUS VARCHAR(500) NOT NULL,
  BRAND_GRADE VARCHAR(500),
  QUANTITY_INSTALLMENT_COUNT INTEGER,
  REQUIRED_DEPOSIT_AMOUNT INTEGER,
  REVENUE_SCHEDULE_TYPE VARCHAR(500),
  IS_PRE_ORDERABLE BOOLEAN NOT NULL,
  REQUIRES_INVIDIDUAL_UNIT_PRICING BOOLEAN NOT NULL,
  STANDARD_WARRANTY_LENGTH_MONTH INTEGER,
  CAN_USE_QUANTITY_SCHEDULE BOOLEAN NOT NULL,
  IS_INSTALLABLE BOOLEAN NOT NULL,
  IS_RAIN_CHECK_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT_START_DATE INTEGER,
  MAXIMUM_ORDER_QUANTITY_COUNT INTEGER,
  IS_MULTIPLE_COUPONS_ALLOWED BOOLEAN NOT NULL,
  ALLOW_CUSTOMER_RETURN BOOLEAN,
  MODEL_NUMBER VARCHAR(500),
  M_SR_PAMOUNT INTEGER,
  EXTERNAL_SOURCE_RECORD VARCHAR(500),
  IS_SELLABLE BOOLEAN,
  VALID_TO_DATE DATE,
  PRICE_CHARGE_TYPE VARCHAR(500) NOT NULL,
  IS_PARTNER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  REVENUE_INSTALLMENT_COUNT INTEGER,
  PRODUCT_SK_U VARCHAR(500) NOT NULL,
  QUANTITY_INSTALLMENT_PERIOD VARCHAR(500),
  IS_MANUAL_PRICE_ENTRY_REQUIRED BOOLEAN NOT NULL,
  TYPE VARCHAR(500),
  IS_SELLABLE_WITHOUT_PRICE BOOLEAN NOT NULL,
  GL_ACCOUNT_CODE VARCHAR(500),
  IS_RETURNABLE BOOLEAN NOT NULL,
  DISPLAY_URL VARCHAR(500),
  VERSION_NUMBER VARCHAR(500),
  LOT_IDENTIFIER VARCHAR(500),
  VALID_FROM_DATE DATE,
  STOCK_LEDGER_VALUATION_AMOUNT INTEGER,
  IS_DYNAMIC_BUNDLE BOOLEAN NOT NULL,
  IS_QUALITY_VERIFICATION_REQUIRED BOOLEAN NOT NULL,
  REQUIRED_DEPOSIT_PERCENTAGE INTEGER,
  IS_FOODSTAMP_PAYMENT_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ORDER_QUANTITY_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS PRODUCT (
  QUANTITY_SCHEDULE_TYPE VARCHAR(500),
  DISPOSAL_TYPE VARCHAR(500),
  LONG_DESCRIPTION VARCHAR(500) NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT INTEGER,
  IS_BACK_ORDERED BOOLEAN NOT NULL,
  VALID_FOR_PERIOD_COUNT INTEGER,
  IS_WORKER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  ALLOW_PARTIAL_REFUND BOOLEAN,
  IS_WEIGHT_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_QUANTITY_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_SERIALIZED BOOLEAN NOT NULL,
  REWARD_PROGRAM_POINTS_COUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  REVENUE_INSTALLMENT_PERIOD VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  IS_AUTO_PROVISIONABLE BOOLEAN NOT NULL,
  IS_COUPON_REDEMPTION_ALLOWED BOOLEAN NOT NULL,
  IS_SELLABLE_INDEPENDENTLY BOOLEAN NOT NULL,
  CAN_USE_REVENUE_SCHEDULE BOOLEAN NOT NULL,
  MANUFACTURER_NAME VARCHAR(500),
  IS_INTELLECTUAL_PROPERTY_PROTECTED BOOLEAN,
  MODEL_YEAR INTEGER,
  IS_CUSTOMER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  PRODUCT_STATUS VARCHAR(500) NOT NULL,
  BRAND_GRADE VARCHAR(500),
  QUANTITY_INSTALLMENT_COUNT INTEGER,
  REQUIRED_DEPOSIT_AMOUNT INTEGER,
  REVENUE_SCHEDULE_TYPE VARCHAR(500),
  IS_PRE_ORDERABLE BOOLEAN NOT NULL,
  REQUIRES_INVIDIDUAL_UNIT_PRICING BOOLEAN NOT NULL,
  STANDARD_WARRANTY_LENGTH_MONTH INTEGER,
  CAN_USE_QUANTITY_SCHEDULE BOOLEAN NOT NULL,
  IS_INSTALLABLE BOOLEAN NOT NULL,
  IS_RAIN_CHECK_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT_START_DATE INTEGER,
  MAXIMUM_ORDER_QUANTITY_COUNT INTEGER,
  IS_MULTIPLE_COUPONS_ALLOWED BOOLEAN NOT NULL,
  ALLOW_CUSTOMER_RETURN BOOLEAN,
  MODEL_NUMBER VARCHAR(500),
  M_SR_PAMOUNT INTEGER,
  EXTERNAL_SOURCE_RECORD VARCHAR(500),
  IS_SELLABLE BOOLEAN,
  VALID_TO_DATE DATE,
  PRICE_CHARGE_TYPE VARCHAR(500) NOT NULL,
  IS_PARTNER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  REVENUE_INSTALLMENT_COUNT INTEGER,
  PRODUCT_SK_U VARCHAR(500) NOT NULL,
  QUANTITY_INSTALLMENT_PERIOD VARCHAR(500),
  IS_MANUAL_PRICE_ENTRY_REQUIRED BOOLEAN NOT NULL,
  TYPE VARCHAR(500),
  IS_SELLABLE_WITHOUT_PRICE BOOLEAN NOT NULL,
  GL_ACCOUNT_CODE VARCHAR(500),
  IS_RETURNABLE BOOLEAN NOT NULL,
  DISPLAY_URL VARCHAR(500),
  VERSION_NUMBER VARCHAR(500),
  LOT_IDENTIFIER VARCHAR(500),
  VALID_FROM_DATE DATE,
  STOCK_LEDGER_VALUATION_AMOUNT INTEGER,
  IS_DYNAMIC_BUNDLE BOOLEAN NOT NULL,
  IS_QUALITY_VERIFICATION_REQUIRED BOOLEAN NOT NULL,
  REQUIRED_DEPOSIT_PERCENTAGE INTEGER,
  IS_FOODSTAMP_PAYMENT_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ORDER_QUANTITY_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS BRAND (
  ID VARCHAR(36) UNIQUE NOT NULL,
  BRAND_GRADE VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS BUNDLE_PRODUCT (
  EXPECTED_WASTE_COUNT INTEGER,
  QUANTITY_COUNT INTEGER,
  ID VARCHAR(36) UNIQUE NOT NULL,
  TARE_WEIGHT INTEGER,
  BUNDLED_PRODUCTS_SUBSTITUTIONAL BOOLEAN NOT NULL,
  BUNDLED_PRODUCTS_DECIDED_AT_USE BOOLEAN,
  BUNDLED_PRODUCTS_DECIDES_AVAILABILITY BOOLEAN,
  BUNDLED_PRODUCTS_SOLD_TOGETHER BOOLEAN NOT NULL,
  WEIGHT_UO_M VARCHAR(500),
  QUANTITY_UNIT_OF_MEASURE VARCHAR(500),
  QUANTITY_SCHEDULE_TYPE VARCHAR(500),
  DISPOSAL_TYPE VARCHAR(500),
  LONG_DESCRIPTION VARCHAR(500) NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT INTEGER,
  IS_BACK_ORDERED BOOLEAN NOT NULL,
  VALID_FOR_PERIOD_COUNT INTEGER,
  IS_WORKER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  ALLOW_PARTIAL_REFUND BOOLEAN,
  IS_WEIGHT_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_QUANTITY_ENTRY_REQUIRED BOOLEAN NOT NULL,
  IS_SERIALIZED BOOLEAN NOT NULL,
  REWARD_PROGRAM_POINTS_COUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  REVENUE_INSTALLMENT_PERIOD VARCHAR(500),
  NAME VARCHAR(500) NOT NULL,
  IS_AUTO_PROVISIONABLE BOOLEAN NOT NULL,
  IS_COUPON_REDEMPTION_ALLOWED BOOLEAN NOT NULL,
  IS_SELLABLE_INDEPENDENTLY BOOLEAN NOT NULL,
  CAN_USE_REVENUE_SCHEDULE BOOLEAN NOT NULL,
  MANUFACTURER_NAME VARCHAR(500),
  IS_INTELLECTUAL_PROPERTY_PROTECTED BOOLEAN,
  MODEL_YEAR INTEGER,
  IS_CUSTOMER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  PRODUCT_STATUS VARCHAR(500) NOT NULL,
  BRAND_GRADE VARCHAR(500),
  QUANTITY_INSTALLMENT_COUNT INTEGER,
  REQUIRED_DEPOSIT_AMOUNT INTEGER,
  REVENUE_SCHEDULE_TYPE VARCHAR(500),
  IS_PRE_ORDERABLE BOOLEAN NOT NULL,
  REQUIRES_INVIDIDUAL_UNIT_PRICING BOOLEAN NOT NULL,
  STANDARD_WARRANTY_LENGTH_MONTH INTEGER,
  CAN_USE_QUANTITY_SCHEDULE BOOLEAN NOT NULL,
  IS_INSTALLABLE BOOLEAN NOT NULL,
  IS_RAIN_CHECK_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ADVERTISEMENT_AMOUNT_START_DATE INTEGER,
  MAXIMUM_ORDER_QUANTITY_COUNT INTEGER,
  IS_MULTIPLE_COUPONS_ALLOWED BOOLEAN NOT NULL,
  ALLOW_CUSTOMER_RETURN BOOLEAN,
  MODEL_NUMBER VARCHAR(500),
  M_SR_PAMOUNT INTEGER,
  EXTERNAL_SOURCE_RECORD VARCHAR(500),
  IS_SELLABLE BOOLEAN,
  VALID_TO_DATE DATE,
  PRICE_CHARGE_TYPE VARCHAR(500) NOT NULL,
  IS_PARTNER_DISCOUNT_ALLOWED BOOLEAN NOT NULL,
  REVENUE_INSTALLMENT_COUNT INTEGER,
  PRODUCT_SK_U VARCHAR(500) NOT NULL,
  QUANTITY_INSTALLMENT_PERIOD VARCHAR(500),
  IS_MANUAL_PRICE_ENTRY_REQUIRED BOOLEAN NOT NULL,
  TYPE VARCHAR(500),
  IS_SELLABLE_WITHOUT_PRICE BOOLEAN NOT NULL,
  GL_ACCOUNT_CODE VARCHAR(500),
  IS_RETURNABLE BOOLEAN NOT NULL,
  DISPLAY_URL VARCHAR(500),
  VERSION_NUMBER VARCHAR(500),
  LOT_IDENTIFIER VARCHAR(500),
  VALID_FROM_DATE DATE,
  STOCK_LEDGER_VALUATION_AMOUNT INTEGER,
  IS_DYNAMIC_BUNDLE BOOLEAN NOT NULL,
  IS_QUALITY_VERIFICATION_REQUIRED BOOLEAN NOT NULL,
  REQUIRED_DEPOSIT_PERCENTAGE INTEGER,
  IS_FOODSTAMP_PAYMENT_ALLOWED BOOLEAN NOT NULL,
  MINIMUM_ORDER_QUANTITY_COUNT INTEGER
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORY_ATTRIBUTE_SET (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ATTRIBUTE_SET VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATALOG (
  ACTIVE_TO_DATE DATE,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORY_TRANSLATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  TRANSLATED_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORY (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATALOG_TRANSLATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  TRANSLATED_NAME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORY_PRODUCT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  ACTIVE_FROM_DATE_TIME TIME NOT NULL,
  ACTIVE_TO_DATE_TIME TIME
);

ALTER TABLE IF EXISTS CREDIT_TENDER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_CARD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_METHOD_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS COUPON
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_METHOD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_LOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_APP
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_ADDRESS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_WEB_ADDRESS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_EMAIL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_SOCIAL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT_PHONE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CONTACT_POINT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_RESULT_CODE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_CREDIT_MEMO_APPLICATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_AUTH_REVERSAL_LOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_AUTHORIZATION_REVERSAL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_APPLICATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_PROVIDER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_POLICY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_TREATMENT_METHOD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_INVOICE_APPLICATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_INTERACTION_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GROUP
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS REFUND_CREDIT_MEMO_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_PAYMENT_LOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS REFUND_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_AUTHORIZATION_LOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_INVOICE_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_CREDIT_MEMO_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_TREATMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_AUTHORIZATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS REFUND_PAYMENT_ALLOCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS REFUND_PAYMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CAPTURE_PAYMENT
ADD   PRIMARY KEY (CAPTURE_PAYMENT_ID)
;

ALTER TABLE IF EXISTS PAYMENT_GATEWAY_INTERACTION_LOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_STATUS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_PRODUCT_PRICE_ADJUSTMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_PACKAGE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_DOCUMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPPING_METHOD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SHIPMENT_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS BILLING_FREQUENCY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ACCOUNT_CONTACT_ROLE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ACCOUNT_CONTACT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ACCOUNT_PARTNER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ACCOUNT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS LEAD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_DELIVERY_STATUS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_REASON_CATEGORY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS RENEWAL_TERM
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_CHANNEL_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PAYMENT_SUMMARY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRICE_ADJUSTMENT_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_TAX
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_NOTE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRICE_ADJUSTMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_STATUS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_GROUP
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_RELATIONSHIP_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_GROUP_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_CONFIRMATION_STATUS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_CHANGE_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRICE_ADJUSTMENT_METHOD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_REASON
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ORDER_DELIVERY_METHOD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_CHANGE_LOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_TAX
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRICE_ADJUSTMENT_GROUP
ADD   PRIMARY KEY (PRICE_ADJUSTMENT_GROUP_ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_DELIVERY_GROUP
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_PRODUCT_STATUS
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_ORDER_SEGMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SALES_CHANNEL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ATTRIBUTE_VALUE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS DEVICE_USER_SESSION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_COLLATERAL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ATTRIBUTE_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_VALIDITY_TIME_PERIOD_UO_M
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_ATTRIBUTE_SET
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_ATTRIBUTE_VALUE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ATTRIBUTE_SET_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRICE_BOOK_ENTRY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS ATTRIBUTE_VALUE_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS UNCATEGORIZED_PARTY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PERSON_LANGUAGE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PERSON_EDUCATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS INDIVIDUAL
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PERSON_EMPLOYMENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_IDENTIFICATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_RELATED_PARTY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_ADDITIONAL_NAME
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_RELATIONSHIP_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS HOUSEHOLD
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PERSON_LIFE_EVENT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS INTERNAL_BUSINESS_UNIT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SUPPLIER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CUSTOMER_STATUS_HISTORY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS COMPETITOR
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SELLER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS CUSTOMER
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PARTY_ROLE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_RELATED_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_IMAGE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_RELATIONSHIP_TYPE
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_IMAGE_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS GOODS_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS SERVICE_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS BRAND
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS BUNDLE_PRODUCT
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATEGORY_ATTRIBUTE_SET
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATALOG
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATEGORY_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATEGORY
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATALOG_TRANSLATION
ADD   PRIMARY KEY (ID)
;

ALTER TABLE IF EXISTS PRODUCT_CATEGORY_PRODUCT
ADD   PRIMARY KEY (ID)
;

CREATE TABLE CREDIT_TENDER_ACCOUNT_JOIN (
  CREDIT_TENDER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CREDIT_TENDER_ID) REFERENCES CREDIT_TENDER(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE CREDIT_TENDER_PAYMENT_METHOD_TYPE_JOIN (
  CREDIT_TENDER_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CREDIT_TENDER_ID) REFERENCES CREDIT_TENDER(ID),
  FOREIGN KEY(PAYMENT_METHOD_TYPE_ID) REFERENCES PAYMENT_METHOD_TYPE(ID)
);

CREATE TABLE PAYMENT_CARD_PAYMENT_METHOD_TYPE_JOIN (
  PAYMENT_CARD_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_CARD_ID) REFERENCES PAYMENT_CARD(ID),
  FOREIGN KEY(PAYMENT_METHOD_TYPE_ID) REFERENCES PAYMENT_METHOD_TYPE(ID)
);

CREATE TABLE COUPON_MANUFACTURER_JOIN (
  COUPON_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(COUPON_ID) REFERENCES COUPON(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE COUPON_PAYMENT_METHOD_TYPE_JOIN (
  COUPON_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(COUPON_ID) REFERENCES COUPON(ID),
  FOREIGN KEY(PAYMENT_METHOD_TYPE_ID) REFERENCES PAYMENT_METHOD_TYPE(ID)
);

CREATE TABLE PAYMENT_METHOD_PAYMENT_METHOD_TYPE_JOIN (
  PAYMENT_METHOD_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID),
  FOREIGN KEY(PAYMENT_METHOD_TYPE_ID) REFERENCES PAYMENT_METHOD_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_LOCATION_PARTY_ROLE_JOIN (
  CONTACT_POINT_LOCATION_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_LOCATION_ID) REFERENCES CONTACT_POINT_LOCATION(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_LOCATION_PARTY_JOIN (
  CONTACT_POINT_LOCATION_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_LOCATION_ID) REFERENCES CONTACT_POINT_LOCATION(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_LOCATION_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_LOCATION_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_LOCATION_ID) REFERENCES CONTACT_POINT_LOCATION(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_APP_PARTY_ROLE_JOIN (
  CONTACT_POINT_APP_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_APP_ID) REFERENCES CONTACT_POINT_APP(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_APP_PARTY_JOIN (
  CONTACT_POINT_APP_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_APP_ID) REFERENCES CONTACT_POINT_APP(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_APP_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_APP_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_APP_ID) REFERENCES CONTACT_POINT_APP(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_ADDRESS_CONTACT_PHONE_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE CONTACT_POINT_ADDRESS_PARTY_ROLE_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_ADDRESS_PARTY_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_ADDRESS_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE PARTY_WEB_ADDRESS_PARTY_JOIN (
  PARTY_WEB_ADDRESS_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_WEB_ADDRESS_ID) REFERENCES PARTY_WEB_ADDRESS(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PARTY_WEB_ADDRESS_PARTY_ROLE_JOIN (
  PARTY_WEB_ADDRESS_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_WEB_ADDRESS_ID) REFERENCES PARTY_WEB_ADDRESS(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE PARTY_WEB_ADDRESS_CONTACT_POINT_TYPE_JOIN (
  PARTY_WEB_ADDRESS_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_WEB_ADDRESS_ID) REFERENCES PARTY_WEB_ADDRESS(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_EMAIL_PARTY_ROLE_JOIN (
  CONTACT_POINT_EMAIL_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_EMAIL_PARTY_JOIN (
  CONTACT_POINT_EMAIL_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_EMAIL_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_EMAIL_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_SOCIAL_PARTY_ROLE_JOIN (
  CONTACT_POINT_SOCIAL_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_SOCIAL_ID) REFERENCES CONTACT_POINT_SOCIAL(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_SOCIAL_PARTY_JOIN (
  CONTACT_POINT_SOCIAL_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_SOCIAL_ID) REFERENCES CONTACT_POINT_SOCIAL(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_SOCIAL_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_SOCIAL_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_SOCIAL_ID) REFERENCES CONTACT_POINT_SOCIAL(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_PHONE_PARTY_ROLE_JOIN (
  CONTACT_POINT_PHONE_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_PHONE_PARTY_JOIN (
  CONTACT_POINT_PHONE_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_PHONE_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_PHONE_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE CONTACT_POINT_PARTY_ROLE_JOIN (
  CONTACT_POINT_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE CONTACT_POINT_PARTY_JOIN (
  CONTACT_POINT_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CONTACT_POINT_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE PAYMENT_CREDIT_MEMO_APPLICATION_PAYMENT_JOIN (
  PAYMENT_CREDIT_MEMO_APPLICATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_CREDIT_MEMO_APPLICATION_ID) REFERENCES PAYMENT_CREDIT_MEMO_APPLICATION(ID),
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID)
);

CREATE TABLE PAY_GAT_AUT_REV_LOG_PAY_AUT_REV_JOIN (
  PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_AUTHORIZATION_REVERSAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTH_REVERSAL_LOG(ID),
  FOREIGN KEY(PAYMENT_AUTHORIZATION_REVERSAL_ID) REFERENCES PAYMENT_AUTHORIZATION_REVERSAL(ID)
);

CREATE TABLE PAY_GAT_AUT_REV_LOG_PAY_GAT_INT_TYP_JOIN (
  PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTH_REVERSAL_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_TYPE_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_TYPE(ID)
);

CREATE TABLE PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTH_REVERSAL_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTH_REVERSAL_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_REVERSAL_CAPTURE_PAYMENT_JOIN (
  PAYMENT_AUTHORIZATION_REVERSAL_ID  VARCHAR(36) NOT NULL,
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_REVERSAL_ID) REFERENCES PAYMENT_AUTHORIZATION_REVERSAL(ID),
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_REVERSAL_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_AUTHORIZATION_REVERSAL_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_REVERSAL_ID) REFERENCES PAYMENT_AUTHORIZATION_REVERSAL(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_REVERSAL_PAYMENT_AUTHORIZATION_JOIN (
  PAYMENT_AUTHORIZATION_REVERSAL_ID  VARCHAR(36) NOT NULL,
  PAYMENT_AUTHORIZATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_REVERSAL_ID) REFERENCES PAYMENT_AUTHORIZATION_REVERSAL(ID),
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID)
);

CREATE TABLE PAYMENT_ALLOCATION_RELATED_PAYMENT_ALLOCATION_JOIN (
  PAYMENT_ALLOCATION_ID_LEFT  VARCHAR(36) NOT NULL,
  PAYMENT_ALLOCATION_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ALLOCATION_ID_LEFT) REFERENCES PAYMENT_ALLOCATION(ID),
  FOREIGN KEY(PAYMENT_ALLOCATION_ID_RIGHT) REFERENCES PAYMENT_ALLOCATION(ID)
);

CREATE TABLE PAYMENT_APPLICATION_PAYMENT_JOIN (
  PAYMENT_APPLICATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_APPLICATION_ID) REFERENCES PAYMENT_APPLICATION(ID),
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID)
);

CREATE TABLE PAYMENT_INVOICE_APPLICATION_PAYMENT_JOIN (
  PAYMENT_INVOICE_APPLICATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_INVOICE_APPLICATION_ID) REFERENCES PAYMENT_INVOICE_APPLICATION(ID),
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID)
);

CREATE TABLE REFUND_CREDIT_MEMO_ALLOCATION_RELATED_REFUND_ALLOCATION_JOIN (
  REFUND_CREDIT_MEMO_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  REFUND_ALLOCATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_CREDIT_MEMO_ALLOCATION_ID) REFERENCES REFUND_CREDIT_MEMO_ALLOCATION(ID),
  FOREIGN KEY(REFUND_ALLOCATION_ID) REFERENCES REFUND_ALLOCATION(ID)
);

CREATE TABLE REFUND_CREDIT_MEMO_ALLOCATION_REFUND_PAYMENT_JOIN (
  REFUND_CREDIT_MEMO_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  REFUND_PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_CREDIT_MEMO_ALLOCATION_ID) REFERENCES REFUND_CREDIT_MEMO_ALLOCATION(ID),
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID)
);

CREATE TABLE PAYMENT_GATEWAY_PAYMENT_LOG_PAYMENT_JOIN (
  PAYMENT_GATEWAY_PAYMENT_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_PAYMENT_LOG_ID) REFERENCES PAYMENT_GATEWAY_PAYMENT_LOG(ID),
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID)
);

CREATE TABLE PAY_GAT_PAY_LOG_PAY_GAT_INT_TYP_JOIN (
  PAYMENT_GATEWAY_PAYMENT_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_PAYMENT_LOG_ID) REFERENCES PAYMENT_GATEWAY_PAYMENT_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_TYPE_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_TYPE(ID)
);

CREATE TABLE PAYMENT_GATEWAY_PAYMENT_LOG_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_GATEWAY_PAYMENT_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_PAYMENT_LOG_ID) REFERENCES PAYMENT_GATEWAY_PAYMENT_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE REFUND_ALLOCATION_RELATED_REFUND_ALLOCATION_JOIN (
  REFUND_ALLOCATION_ID_LEFT  VARCHAR(36) NOT NULL,
  REFUND_ALLOCATION_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_ALLOCATION_ID_LEFT) REFERENCES REFUND_ALLOCATION(ID),
  FOREIGN KEY(REFUND_ALLOCATION_ID_RIGHT) REFERENCES REFUND_ALLOCATION(ID)
);

CREATE TABLE REFUND_ALLOCATION_REFUND_PAYMENT_JOIN (
  REFUND_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  REFUND_PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_ALLOCATION_ID) REFERENCES REFUND_ALLOCATION(ID),
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID)
);

CREATE TABLE PAYMENT_GATEWAY_AUTHORIZATION_LOG_PAYMENT_AUTHORIZATION_JOIN (
  PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_AUTHORIZATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTHORIZATION_LOG(ID),
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID)
);

CREATE TABLE PAY_GAT_AUT_LOG_PAY_GAT_INT_TYP_JOIN (
  PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTHORIZATION_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_TYPE_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_TYPE(ID)
);

CREATE TABLE PAYMENT_GATEWAY_AUTHORIZATION_LOG_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_AUTHORIZATION_LOG_ID) REFERENCES PAYMENT_GATEWAY_AUTHORIZATION_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE PAYMENT_INVOICE_ALLOCATION_PAYMENT_INVOICE_APPLICATION_JOIN (
  PAYMENT_INVOICE_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_INVOICE_APPLICATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_INVOICE_ALLOCATION_ID) REFERENCES PAYMENT_INVOICE_ALLOCATION(ID),
  FOREIGN KEY(PAYMENT_INVOICE_APPLICATION_ID) REFERENCES PAYMENT_INVOICE_APPLICATION(ID)
);

CREATE TABLE PAYMENT_INVOICE_ALLOCATION_RELATED_PAYMENT_ALLOCATION_JOIN (
  PAYMENT_INVOICE_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ALLOCATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_INVOICE_ALLOCATION_ID) REFERENCES PAYMENT_INVOICE_ALLOCATION(ID),
  FOREIGN KEY(PAYMENT_ALLOCATION_ID) REFERENCES PAYMENT_ALLOCATION(ID)
);

CREATE TABLE PAYMENT_ACCOUNT_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE PAYMENT_SALES_ORDER_PAYMENT_SUMMARY_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PAYMENT_SUMMARY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID)
);

CREATE TABLE PAYMENT_LATEST_GATEWAY_RESULT_CODE_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE PAYMENT_PAYMENT_GROUP_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GROUP_ID) REFERENCES PAYMENT_GROUP(ID)
);

CREATE TABLE PAYMENT_PAYMENT_METHOD_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE PAYMENT_PAYMENT_GATEWAY_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_ID) REFERENCES PAYMENT_GATEWAY(ID)
);

CREATE TABLE PAYMENT_PAYMENT_TREATMENT_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_TREATMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(PAYMENT_TREATMENT_ID) REFERENCES PAYMENT_TREATMENT(ID)
);

CREATE TABLE PAYMENT_INTERNAL_BUSINESS_UNIT_JOIN (
  PAYMENT_ID  VARCHAR(36) NOT NULL,
  INTERNAL_BUSINESS_UNIT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(ID),
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID) REFERENCES INTERNAL_BUSINESS_UNIT(ID)
);

CREATE TABLE PAYMENT_CREDIT_MEMO_ALLOCATION_RELATED_PAYMENT_ALLOCATION_JOIN (
  PAYMENT_CREDIT_MEMO_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_ALLOCATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_CREDIT_MEMO_ALLOCATION_ID) REFERENCES PAYMENT_CREDIT_MEMO_ALLOCATION(ID),
  FOREIGN KEY(PAYMENT_ALLOCATION_ID) REFERENCES PAYMENT_ALLOCATION(ID)
);

CREATE TABLE PAYMENT_TREATMENT_PAYMENT_TREATMENT_METHOD_JOIN (
  PAYMENT_TREATMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_TREATMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_TREATMENT_ID) REFERENCES PAYMENT_TREATMENT(ID),
  FOREIGN KEY(PAYMENT_TREATMENT_METHOD_ID) REFERENCES PAYMENT_TREATMENT_METHOD(ID)
);

CREATE TABLE PAYMENT_TREATMENT_PAYMENT_POLICY_JOIN (
  PAYMENT_TREATMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_POLICY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_TREATMENT_ID) REFERENCES PAYMENT_TREATMENT(ID),
  FOREIGN KEY(PAYMENT_POLICY_ID) REFERENCES PAYMENT_POLICY(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_SALES_ORDER_PAYMENT_SUMMARY_JOIN (
  PAYMENT_AUTHORIZATION_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PAYMENT_SUMMARY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID),
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_PAYMENT_GROUP_JOIN (
  PAYMENT_AUTHORIZATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID),
  FOREIGN KEY(PAYMENT_GROUP_ID) REFERENCES PAYMENT_GROUP(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_PAYMENT_GATEWAY_JOIN (
  PAYMENT_AUTHORIZATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_ID) REFERENCES PAYMENT_GATEWAY(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_AUTHORIZATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE PAYMENT_AUTHORIZATION_PAYMENT_METHOD_JOIN (
  PAYMENT_AUTHORIZATION_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE REFUND_PAYMENT_ALLOCATION_CAPTURE_PAYMENT_JOIN (
  REFUND_PAYMENT_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ALLOCATION_ID) REFERENCES REFUND_PAYMENT_ALLOCATION(ID),
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID)
);

CREATE TABLE REFUND_PAYMENT_ALLOCATION_RELATED_REFUND_ALLOCATION_JOIN (
  REFUND_PAYMENT_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  REFUND_ALLOCATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ALLOCATION_ID) REFERENCES REFUND_PAYMENT_ALLOCATION(ID),
  FOREIGN KEY(REFUND_ALLOCATION_ID) REFERENCES REFUND_ALLOCATION(ID)
);

CREATE TABLE REFUND_PAYMENT_ALLOCATION_REFUND_PAYMENT_JOIN (
  REFUND_PAYMENT_ALLOCATION_ID  VARCHAR(36) NOT NULL,
  REFUND_PAYMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ALLOCATION_ID) REFERENCES REFUND_PAYMENT_ALLOCATION(ID),
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID)
);

CREATE TABLE REFUND_PAYMENT_ACCOUNT_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE REFUND_PAYMENT_SALES_ORDER_PAYMENT_SUMMARY_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PAYMENT_SUMMARY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID)
);

CREATE TABLE REFUND_PAYMENT_LATEST_GATEWAY_RESULT_CODE_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE REFUND_PAYMENT_PAYMENT_GROUP_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GROUP_ID) REFERENCES PAYMENT_GROUP(ID)
);

CREATE TABLE REFUND_PAYMENT_PAYMENT_METHOD_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE REFUND_PAYMENT_PAYMENT_GATEWAY_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_ID) REFERENCES PAYMENT_GATEWAY(ID)
);

CREATE TABLE REFUND_PAYMENT_PAYMENT_TREATMENT_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_TREATMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(PAYMENT_TREATMENT_ID) REFERENCES PAYMENT_TREATMENT(ID)
);

CREATE TABLE REFUND_PAYMENT_INTERNAL_BUSINESS_UNIT_JOIN (
  REFUND_PAYMENT_ID  VARCHAR(36) NOT NULL,
  INTERNAL_BUSINESS_UNIT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(REFUND_PAYMENT_ID) REFERENCES REFUND_PAYMENT(ID),
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID) REFERENCES INTERNAL_BUSINESS_UNIT(ID)
);

CREATE TABLE PAYMENT_GATEWAY_PAYMENT_GATEWAY_PROVIDER_JOIN (
  PAYMENT_GATEWAY_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_PROVIDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_ID) REFERENCES PAYMENT_GATEWAY(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_PROVIDER_ID) REFERENCES PAYMENT_GATEWAY_PROVIDER(ID)
);

CREATE TABLE CAPTURE_PAYMENT_PAYMENT_AUTHORIZATION_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_AUTHORIZATION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_AUTHORIZATION_ID) REFERENCES PAYMENT_AUTHORIZATION(ID)
);

CREATE TABLE CAPTURE_PAYMENT_ACCOUNT_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE CAPTURE_PAYMENT_SALES_ORDER_PAYMENT_SUMMARY_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PAYMENT_SUMMARY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID)
);

CREATE TABLE CAPTURE_PAYMENT_LATEST_GATEWAY_RESULT_CODE_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE CAPTURE_PAYMENT_PAYMENT_GROUP_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_GROUP_ID) REFERENCES PAYMENT_GROUP(ID)
);

CREATE TABLE CAPTURE_PAYMENT_PAYMENT_METHOD_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE CAPTURE_PAYMENT_PAYMENT_GATEWAY_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_GATEWAY_ID) REFERENCES PAYMENT_GATEWAY(ID)
);

CREATE TABLE CAPTURE_PAYMENT_PAYMENT_TREATMENT_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_TREATMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(PAYMENT_TREATMENT_ID) REFERENCES PAYMENT_TREATMENT(ID)
);

CREATE TABLE CAPTURE_PAYMENT_INTERNAL_BUSINESS_UNIT_JOIN (
  CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID  VARCHAR(36) NOT NULL,
  INTERNAL_BUSINESS_UNIT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CAPTURE_PAYMENT_CAPTURE_PAYMENT_ID) REFERENCES CAPTURE_PAYMENT(CAPTURE_PAYMENT_ID),
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID) REFERENCES INTERNAL_BUSINESS_UNIT(ID)
);

CREATE TABLE PAY_GAT_INT_LOG_PAY_GAT_INT_TYP_JOIN (
  PAYMENT_GATEWAY_INTERACTION_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_INTERACTION_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_LOG_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_TYPE_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_TYPE(ID)
);

CREATE TABLE PAYMENT_GATEWAY_INTERACTION_LOG_PAYMENT_GATEWAY_RESULT_JOIN (
  PAYMENT_GATEWAY_INTERACTION_LOG_ID  VARCHAR(36) NOT NULL,
  PAYMENT_GATEWAY_RESULT_CODE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PAYMENT_GATEWAY_INTERACTION_LOG_ID) REFERENCES PAYMENT_GATEWAY_INTERACTION_LOG(ID),
  FOREIGN KEY(PAYMENT_GATEWAY_RESULT_CODE_ID) REFERENCES PAYMENT_GATEWAY_RESULT_CODE(ID)
);

CREATE TABLE SHI_PRO_PRI_ADJ_TAX_SHI_PRO_PRI_ADJ_JOIN (
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX_ID) REFERENCES SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX(ID),
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID) REFERENCES SHIPMENT_PRODUCT_PRICE_ADJUSTMENT(ID)
);

CREATE TABLE SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_SHIPMENT_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID) REFERENCES SHIPMENT_PRODUCT_PRICE_ADJUSTMENT(ID),
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_PRODUCT(ID)
);

CREATE TABLE SHIPMENT_SHIPMENT_STATUS_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID),
  FOREIGN KEY(SHIPMENT_STATUS_ID) REFERENCES SHIPMENT_STATUS(ID)
);

CREATE TABLE SHIPMENT_SALES_ORDER_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SHIPMENT_SHIP_TO_ADDRESS_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SHIPMENT_SALES_ORDER_DELIVERY_GROUP_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_DELIVERY_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID),
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID)
);

CREATE TABLE SHIPMENT_PACKAGE_SHIPMENT_JOIN (
  SHIPMENT_PACKAGE_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PACKAGE_ID) REFERENCES SHIPMENT_PACKAGE(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID)
);

CREATE TABLE SHIPMENT_DOCUMENT_SHIPMENT_JOIN (
  SHIPMENT_DOCUMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_DOCUMENT_ID) REFERENCES SHIPMENT_DOCUMENT(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID)
);

CREATE TABLE SHIPPING_METHOD_PRODUCT_JOIN (
  SHIPPING_METHOD_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPPING_METHOD_ID) REFERENCES SHIPPING_METHOD(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE SHIPMENT_PRODUCT_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE SHIPMENT_PRODUCT_SHIPMENT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT(ID)
);

CREATE TABLE SHIPMENT_PRODUCT_SHIPMENT_PACKAGE_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PACKAGE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SHIPMENT_PACKAGE_ID) REFERENCES SHIPMENT_PACKAGE(ID)
);

CREATE TABLE SHIPMENT_PRODUCT_SALES_ORDER_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE ACCOUNT_CONTACT_ROLE_ACCOUNT_CONTACT_JOIN (
  ACCOUNT_CONTACT_ROLE_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ROLE_ID) REFERENCES ACCOUNT_CONTACT_ROLE(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE ACCOUNT_CONTACT_REPORTS_TO_ACCOUNT_CONTACT_JOIN (
  ACCOUNT_CONTACT_ID_LEFT  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID_LEFT) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID_RIGHT) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE ACCOUNT_CONTACT_MAILING_ADDRESS_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE ACCOUNT_CONTACT_ACCOUNT_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE ACCOUNT_CONTACT_FAX_PHONE_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_CONTACT_BUSINESS_PHONE_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_CONTACT_CONTACT_EMAIL_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE ACCOUNT_CONTACT_MOBILE_PHONE_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_CONTACT_INDIRECT_RELATION_ACCOUNT_CONTACT_JOIN (
  ACCOUNT_CONTACT_ID_LEFT  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID_LEFT) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID_RIGHT) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE ACCOUNT_CONTACT_INDIVIDUAL_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  INDIVIDUAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID)
);

CREATE TABLE ACCOUNT_CONTACT_OTHER_CONTACT_ADDRESS_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE ACCOUNT_CONTACT_HOME_PHONE_JOIN (
  ACCOUNT_CONTACT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_PARTNER_ACCOUNT_JOIN (
  ACCOUNT_PARTNER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_PARTNER_ID) REFERENCES ACCOUNT_PARTNER(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE ACCOUNT_PARTNER_PARTNER_ACCOUNT_JOIN (
  ACCOUNT_PARTNER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_PARTNER_ID) REFERENCES ACCOUNT_PARTNER(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE ACCOUNT_BILL_CONTACT_ADDRESS_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE ACCOUNT_BILL_FREQUENCY_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  BILLING_FREQUENCY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(BILLING_FREQUENCY_ID) REFERENCES BILLING_FREQUENCY(ID)
);

CREATE TABLE ACCOUNT_PARTY_ROLE_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE ACCOUNT_FAX_PHONE_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_SALES_PHONE_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_AUTO_PAYMENT_METHOD_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE ACCOUNT_SHIPPING_ADDRESS_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE ACCOUNT_PARTY_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE ACCOUNT_PARENT_ACCOUNT_JOIN (
  ACCOUNT_ID_LEFT  VARCHAR(36) NOT NULL,
  ACCOUNT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID_LEFT) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(ACCOUNT_ID_RIGHT) REFERENCES ACCOUNT(ID)
);

CREATE TABLE ACCOUNT_SHIPPING_CONTACT_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE ACCOUNT_SHIPPING_PHONEID_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE ACCOUNT_SHIPPING_EMAIL_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE ACCOUNT_ORDER_DELIVERY_METHOD_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  ORDER_DELIVERY_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(ORDER_DELIVERY_METHOD_ID) REFERENCES ORDER_DELIVERY_METHOD(ID)
);

CREATE TABLE ACCOUNT_PRIMARY_SALES_CONTACT_POINT_JOIN (
  ACCOUNT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID)
);

CREATE TABLE LEAD_FAX_CONTACT_PHONE_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE LEAD_PARTY_ROLE_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE LEAD_CONTACT_POINT_EMAIL_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE LEAD_MOBILE_CONTACT_PHONE_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE LEAD_CONTACT_ADDRESS_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE LEAD_CONVERTED_TO_ACCOUNT_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE LEAD_CONVERTED_TO_ACCOUNT_CONTACT_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE LEAD_PHONE_CONTACT_POINT_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE LEAD_PARTNER_ACCOUNT_JOIN (
  LEAD_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(LEAD_ID) REFERENCES LEAD(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE SALES_ORDER_BILL_TO_EMAIL_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE SALES_ORDER_SHIP_TO_EMAIL_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE SALES_ORDER_SALES_ORDER_CONFIRMATION_STATUS_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_CONFIRMATION_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SALES_ORDER_CONFIRMATION_STATUS_ID) REFERENCES SALES_ORDER_CONFIRMATION_STATUS(ID)
);

CREATE TABLE SALES_ORDER_SALES_ORDER_TYPE_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SALES_ORDER_TYPE_ID) REFERENCES SALES_ORDER_TYPE(ID)
);

CREATE TABLE SALES_ORDER_PAYMENT_METHOD_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE SALES_ORDER_SALES_ORDER_STATUS_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SALES_ORDER_STATUS_ID) REFERENCES SALES_ORDER_STATUS(ID)
);

CREATE TABLE SALES_ORDER_RENEWAL_TERM_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  RENEWAL_TERM_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(RENEWAL_TERM_ID) REFERENCES RENEWAL_TERM(ID)
);

CREATE TABLE SALES_ORDER_ORIGINAL_ORDER_JOIN (
  SALES_ORDER_ID_LEFT  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID_LEFT) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SALES_ORDER_ID_RIGHT) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_BILL_TO_ACCOUNT_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE SALES_ORDER_USER_DEVICE_SESSION_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  DEVICE_USER_SESSION_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(DEVICE_USER_SESSION_ID) REFERENCES DEVICE_USER_SESSION(ID)
);

CREATE TABLE SALES_ORDER_SELLER_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  SELLER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SELLER_ID) REFERENCES SELLER(ID)
);

CREATE TABLE SALES_ORDER_BILL_TO_ADDRESS_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SALES_ORDER_SHIP_TO_ADDRESS_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SALES_ORDER_BILL_TO_CONTACT_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE SALES_ORDER_INTERNAL_BUSINESS_UNIT_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  INTERNAL_BUSINESS_UNIT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID) REFERENCES INTERNAL_BUSINESS_UNIT(ID)
);

CREATE TABLE SALES_ORDER_SALES_CHANNEL_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID)
);

CREATE TABLE SALES_ORDER_BILL_TO_PHONE_NUMBER_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE SALES_ORDER_SOLD_TO_CUSTOMER_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  CUSTOMER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(ID)
);

CREATE TABLE SALES_ORDER_SHIP_TO_CONTACT_JOIN (
  SALES_ORDER_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE SALES_ORDER_PAYMENT_SUMMARY_SALES_ORDER_JOIN (
  SALES_ORDER_PAYMENT_SUMMARY_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_PAYMENT_SUMMARY_PAYMENT_METHOD_JOIN (
  SALES_ORDER_PAYMENT_SUMMARY_ID  VARCHAR(36) NOT NULL,
  PAYMENT_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PAYMENT_SUMMARY_ID) REFERENCES SALES_ORDER_PAYMENT_SUMMARY(ID),
  FOREIGN KEY(PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SHIPPING_PHONE_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_PHONE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SALES_ORDER_PRODUCT_REASON_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_REASON_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_REASON_ID) REFERENCES SALES_ORDER_PRODUCT_REASON(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_PRODUCT_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SALES_ORDER_PRODUCT_STATUS_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_STATUS_ID) REFERENCES SALES_ORDER_PRODUCT_STATUS(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SALES_ORDER_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SHIPPING_ADDRESS_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_PRICE_BOOK_ENTRY_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRICE_BOOK_ENTRY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(PRICE_BOOK_ENTRY_ID) REFERENCES PRICE_BOOK_ENTRY(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SHIPPING_EMAIL_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_EMAIL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SUBSCRIPTION_TERM_UNIT_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_LIST_PRICE_TERM_UO_M_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SALES_ORDER_DELIVERY_GROUP_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_DELIVERY_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_ORIGINAL_ORDER_PRODUCT_JOIN (
  SALES_ORDER_PRODUCT_ID_LEFT  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID_LEFT) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID_RIGHT) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_SELLER_ACCOUNT_JOIN (
  SALES_ORDER_PRODUCT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE SALES_ORDER_PRICE_ADJUSTMENT_SALES_ORDER_JOIN (
  SALES_ORDER_PRICE_ADJUSTMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRICE_ADJUSTMENT_ID) REFERENCES SALES_ORDER_PRICE_ADJUSTMENT(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_GROUP_SALES_ORDER_PRODUCT_GROUP_TYPE_JOIN (
  SALES_ORDER_PRODUCT_GROUP_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_GROUP_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_GROUP_ID) REFERENCES SALES_ORDER_PRODUCT_GROUP(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_GROUP_TYPE_ID) REFERENCES SALES_ORDER_PRODUCT_GROUP_TYPE(ID)
);

CREATE TABLE SAL_ORD_PRO_REA_SAL_ORD_PRO_REA_CAT_JOIN (
  SALES_ORDER_PRODUCT_REASON_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_REASON_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_REASON_ID) REFERENCES SALES_ORDER_PRODUCT_REASON(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_REASON_CATEGORY_ID) REFERENCES SALES_ORDER_PRODUCT_REASON_CATEGORY(ID)
);

CREATE TABLE ORDER_DELIVERY_METHOD_PRODUCT_JOIN (
  ORDER_DELIVERY_METHOD_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ORDER_DELIVERY_METHOD_ID) REFERENCES ORDER_DELIVERY_METHOD(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_CHANGE_LOG_CHANGE_SALES_ORDER_JOIN (
  SALES_ORDER_CHANGE_LOG_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_CHANGE_LOG_ID) REFERENCES SALES_ORDER_CHANGE_LOG(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_CHANGE_LOG_RELATED_SALES_ORDER_PRODUCT_JOIN (
  SALES_ORDER_CHANGE_LOG_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_CHANGE_LOG_ID) REFERENCES SALES_ORDER_CHANGE_LOG(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_CHANGE_LOG_CHANGE_SALES_ORDER_PRODUCT_JOIN (
  SALES_ORDER_CHANGE_LOG_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_CHANGE_LOG_ID) REFERENCES SALES_ORDER_CHANGE_LOG(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_CHANGE_LOG_RELATED_SALES_ORDER_JOIN (
  SALES_ORDER_CHANGE_LOG_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_CHANGE_LOG_ID) REFERENCES SALES_ORDER_CHANGE_LOG(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_TAX_ORIGINAL_SALES_ORDER_PRODUCT_TAX_JOIN (
  SALES_ORDER_PRODUCT_TAX_ID_LEFT  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_TAX_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_TAX_ID_LEFT) REFERENCES SALES_ORDER_PRODUCT_TAX(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_TAX_ID_RIGHT) REFERENCES SALES_ORDER_PRODUCT_TAX(ID)
);

CREATE TABLE SALES_ORDER_PRODUCT_TAX_SALES_ORDER_PRODUCT_JOIN (
  SALES_ORDER_PRODUCT_TAX_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_PRODUCT_TAX_ID) REFERENCES SALES_ORDER_PRODUCT_TAX(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_CONTACT_POINT_ADDRESS_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_SALES_ORDER_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_SALES_ORDER_DELIVERY_STATUS_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_DELIVERY_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(SALES_ORDER_DELIVERY_STATUS_ID) REFERENCES SALES_ORDER_DELIVERY_STATUS(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_ORIGINAL_DELIVERY_GROUP_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID_LEFT  VARCHAR(36) NOT NULL,
  SALES_ORDER_DELIVERY_GROUP_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID_LEFT) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID_RIGHT) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_ORDER_DELIVERY_METHOD_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID  VARCHAR(36) NOT NULL,
  ORDER_DELIVERY_METHOD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(ORDER_DELIVERY_METHOD_ID) REFERENCES ORDER_DELIVERY_METHOD(ID)
);

CREATE TABLE SALES_ORDER_DELIVERY_GROUP_ACCOUNT_CONTACT_JOIN (
  SALES_ORDER_DELIVERY_GROUP_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_CONTACT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_DELIVERY_GROUP(ID),
  FOREIGN KEY(ACCOUNT_CONTACT_ID) REFERENCES ACCOUNT_CONTACT(ID)
);

CREATE TABLE SALES_CHANNEL_SALES_CHANNEL_TYPE_JOIN (
  SALES_CHANNEL_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID),
  FOREIGN KEY(SALES_CHANNEL_TYPE_ID) REFERENCES SALES_CHANNEL_TYPE(ID)
);

CREATE TABLE PRODUCT_COLLATERAL_PRODUCT_JOIN (
  PRODUCT_COLLATERAL_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_COLLATERAL_ID) REFERENCES PRODUCT_COLLATERAL(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_ATTRIBUTE_SET_PRODUCT_JOIN (
  PRODUCT_ATTRIBUTE_SET_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ATTRIBUTE_SET_ID) REFERENCES PRODUCT_ATTRIBUTE_SET(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_ATTRIBUTE_VALUE_PRODUCT_JOIN (
  PRODUCT_ATTRIBUTE_VALUE_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ATTRIBUTE_VALUE_ID) REFERENCES PRODUCT_ATTRIBUTE_VALUE(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_ATTRIBUTE_VALUE_ATTRIBUTE_VALUE_JOIN (
  PRODUCT_ATTRIBUTE_VALUE_ID  VARCHAR(36) NOT NULL,
  ATTRIBUTE_VALUE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ATTRIBUTE_VALUE_ID) REFERENCES PRODUCT_ATTRIBUTE_VALUE(ID),
  FOREIGN KEY(ATTRIBUTE_VALUE_ID) REFERENCES ATTRIBUTE_VALUE(ID)
);

CREATE TABLE PRICE_BOOK_ENTRY_PRODUCT_JOIN (
  PRICE_BOOK_ENTRY_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRICE_BOOK_ENTRY_ID) REFERENCES PRICE_BOOK_ENTRY(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE ATTRIBUTE_VALUE_TRANSLATION_ATTRIBUTE_VALUE_JOIN (
  ATTRIBUTE_VALUE_TRANSLATION_ID  VARCHAR(36) NOT NULL,
  ATTRIBUTE_VALUE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(ATTRIBUTE_VALUE_TRANSLATION_ID) REFERENCES ATTRIBUTE_VALUE_TRANSLATION(ID),
  FOREIGN KEY(ATTRIBUTE_VALUE_ID) REFERENCES ATTRIBUTE_VALUE(ID)
);

CREATE TABLE UNCATEGORIZED_PARTY_PRIMARY_ACCOUNT_JOIN (
  UNCATEGORIZED_PARTY_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(UNCATEGORIZED_PARTY_ID) REFERENCES UNCATEGORIZED_PARTY(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE PERSON_LANGUAGE_INDIVIDUAL_JOIN (
  PERSON_LANGUAGE_ID  VARCHAR(36) NOT NULL,
  INDIVIDUAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PERSON_LANGUAGE_ID) REFERENCES PERSON_LANGUAGE(ID),
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID)
);

CREATE TABLE PERSON_EDUCATION_INDIVIDUAL_JOIN (
  PERSON_EDUCATION_ID  VARCHAR(36) NOT NULL,
  INDIVIDUAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PERSON_EDUCATION_ID) REFERENCES PERSON_EDUCATION(ID),
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID)
);

CREATE TABLE INDIVIDUAL_PRIMARY_HOUSEHOLD_JOIN (
  INDIVIDUAL_ID  VARCHAR(36) NOT NULL,
  HOUSEHOLD_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID),
  FOREIGN KEY(HOUSEHOLD_ID) REFERENCES HOUSEHOLD(ID)
);

CREATE TABLE INDIVIDUAL_PRIMARY_ACCOUNT_JOIN (
  INDIVIDUAL_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE PERSON_EMPLOYMENT_EMPLOYER_CONTACT_POINT_ADDRESS_JOIN (
  PERSON_EMPLOYMENT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PERSON_EMPLOYMENT_ID) REFERENCES PERSON_EMPLOYMENT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE PERSON_EMPLOYMENT_INDIVIDUAL_JOIN (
  PERSON_EMPLOYMENT_ID  VARCHAR(36) NOT NULL,
  INDIVIDUAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PERSON_EMPLOYMENT_ID) REFERENCES PERSON_EMPLOYMENT(ID),
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID)
);

CREATE TABLE PARTY_IDENTIFICATION_PARTY_ROLE_JOIN (
  PARTY_IDENTIFICATION_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_IDENTIFICATION_ID) REFERENCES PARTY_IDENTIFICATION(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE PARTY_IDENTIFICATION_PARTY_JOIN (
  PARTY_IDENTIFICATION_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_IDENTIFICATION_ID) REFERENCES PARTY_IDENTIFICATION(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PARTY_RELATED_PARTY_PARTY_RELATIONSHIP_TYPE_JOIN (
  PARTY_RELATED_PARTY_ID  VARCHAR(36) NOT NULL,
  PARTY_RELATIONSHIP_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_RELATED_PARTY_ID) REFERENCES PARTY_RELATED_PARTY(ID),
  FOREIGN KEY(PARTY_RELATIONSHIP_TYPE_ID) REFERENCES PARTY_RELATIONSHIP_TYPE(ID)
);

CREATE TABLE PARTY_RELATED_PARTY_RELATED_PARTY_JOIN (
  PARTY_RELATED_PARTY_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_RELATED_PARTY_ID) REFERENCES PARTY_RELATED_PARTY(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PARTY_RELATED_PARTY_PARTY_JOIN (
  PARTY_RELATED_PARTY_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_RELATED_PARTY_ID) REFERENCES PARTY_RELATED_PARTY(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PARTY_ADDITIONAL_NAME_PARTY_JOIN (
  PARTY_ADDITIONAL_NAME_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_ADDITIONAL_NAME_ID) REFERENCES PARTY_ADDITIONAL_NAME(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE HOUSEHOLD_PRIMARY_ACCOUNT_JOIN (
  HOUSEHOLD_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(HOUSEHOLD_ID) REFERENCES HOUSEHOLD(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE PERSON_LIFE_EVENT_INDIVIDUAL_JOIN (
  PERSON_LIFE_EVENT_ID  VARCHAR(36) NOT NULL,
  INDIVIDUAL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PERSON_LIFE_EVENT_ID) REFERENCES PERSON_LIFE_EVENT(ID),
  FOREIGN KEY(INDIVIDUAL_ID) REFERENCES INDIVIDUAL(ID)
);

CREATE TABLE PARTY_PRIMARY_ACCOUNT_JOIN (
  PARTY_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE INTERNAL_BUSINESS_UNIT_PARENT_INTERNAL_BUSINESS_UNIT_JOIN (
  INTERNAL_BUSINESS_UNIT_ID_LEFT  VARCHAR(36) NOT NULL,
  INTERNAL_BUSINESS_UNIT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID_LEFT) REFERENCES INTERNAL_BUSINESS_UNIT(ID),
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID_RIGHT) REFERENCES INTERNAL_BUSINESS_UNIT(ID)
);

CREATE TABLE INTERNAL_BUSINESS_UNIT_PRIMARY_ACCOUNT_JOIN (
  INTERNAL_BUSINESS_UNIT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(INTERNAL_BUSINESS_UNIT_ID) REFERENCES INTERNAL_BUSINESS_UNIT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE SUPPLIER_PARTY_JOIN (
  SUPPLIER_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIER(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CUSTOMER_STATUS_HISTORY_PARTY_ROLE_JOIN (
  CUSTOMER_STATUS_HISTORY_ID  VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CUSTOMER_STATUS_HISTORY_ID) REFERENCES CUSTOMER_STATUS_HISTORY(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE TABLE COMPETITOR_PARTY_JOIN (
  COMPETITOR_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(COMPETITOR_ID) REFERENCES COMPETITOR(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE SELLER_PARTY_JOIN (
  SELLER_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SELLER_ID) REFERENCES SELLER(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE CUSTOMER_PARTY_JOIN (
  CUSTOMER_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PARTY_ROLE_PARTY_JOIN (
  PARTY_ROLE_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE PRODUCT_RELATED_PRODUCT_SALES_ORDER_PRODUCT1_JOIN (
  PRODUCT_RELATED_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_RELATED_PRODUCT_ID) REFERENCES PRODUCT_RELATED_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE PRODUCT_RELATED_PRODUCT_PARENT_PRODUCT_JOIN (
  PRODUCT_RELATED_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_RELATED_PRODUCT_ID) REFERENCES PRODUCT_RELATED_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_RELATED_PRODUCT_CHILD_PRODUCT_JOIN (
  PRODUCT_RELATED_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_RELATED_PRODUCT_ID) REFERENCES PRODUCT_RELATED_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_RELATED_PRODUCT_PRODUCT_RELATIONSHIP_TYPE_JOIN (
  PRODUCT_RELATED_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_RELATIONSHIP_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_RELATED_PRODUCT_ID) REFERENCES PRODUCT_RELATED_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_RELATIONSHIP_TYPE_ID) REFERENCES PRODUCT_RELATIONSHIP_TYPE(ID)
);

CREATE TABLE PRODUCT_RELATED_PRODUCT_SALES_ORDER_PRODUCT2_JOIN (
  PRODUCT_RELATED_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_RELATED_PRODUCT_ID) REFERENCES PRODUCT_RELATED_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_PRODUCT(ID)
);

CREATE TABLE PRODUCT_TRANSLATION_PRODUCT_JOIN (
  PRODUCT_TRANSLATION_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_TRANSLATION_ID) REFERENCES PRODUCT_TRANSLATION(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_IMAGE_PRODUCT_JOIN (
  PRODUCT_IMAGE_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_IMAGE_ID) REFERENCES PRODUCT_IMAGE(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_IMAGE_TRANSLATION_PRODUCT_IMAGE_JOIN (
  PRODUCT_IMAGE_TRANSLATION_ID  VARCHAR(36) NOT NULL,
  PRODUCT_IMAGE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_IMAGE_TRANSLATION_ID) REFERENCES PRODUCT_IMAGE_TRANSLATION(ID),
  FOREIGN KEY(PRODUCT_IMAGE_ID) REFERENCES PRODUCT_IMAGE(ID)
);

CREATE TABLE GOODS_PRODUCT_PRIMARY_PRODUCT_CATEGORY_JOIN (
  GOODS_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(GOODS_PRODUCT_ID) REFERENCES GOODS_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE GOODS_PRODUCT_MASTER_PRODUCT_JOIN (
  GOODS_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(GOODS_PRODUCT_ID) REFERENCES GOODS_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE GOODS_PRODUCT_PRIMARY_SALES_CHANNEL_JOIN (
  GOODS_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(GOODS_PRODUCT_ID) REFERENCES GOODS_PRODUCT(ID),
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID)
);

CREATE TABLE GOODS_PRODUCT_VALID_FOR_PERIOD_UO_M_JOIN (
  GOODS_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(GOODS_PRODUCT_ID) REFERENCES GOODS_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE GOODS_PRODUCT_BRAND_JOIN (
  GOODS_PRODUCT_ID  VARCHAR(36) NOT NULL,
  BRAND_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(GOODS_PRODUCT_ID) REFERENCES GOODS_PRODUCT(ID),
  FOREIGN KEY(BRAND_ID) REFERENCES BRAND(ID)
);

CREATE TABLE SERVICE_PRODUCT_SERVICE_PROVIDER_ACCOUNT_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  ACCOUNT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID)
);

CREATE TABLE SERVICE_PRODUCT_PRIMARY_PRODUCT_CATEGORY_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE SERVICE_PRODUCT_MASTER_PRODUCT_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE SERVICE_PRODUCT_PRIMARY_SALES_CHANNEL_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID)
);

CREATE TABLE SERVICE_PRODUCT_VALID_FOR_PERIOD_UO_M_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE SERVICE_PRODUCT_BRAND_JOIN (
  SERVICE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  BRAND_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SERVICE_PRODUCT_ID) REFERENCES SERVICE_PRODUCT(ID),
  FOREIGN KEY(BRAND_ID) REFERENCES BRAND(ID)
);

CREATE TABLE PRODUCT_PRIMARY_PRODUCT_CATEGORY_JOIN (
  PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE PRODUCT_MASTER_PRODUCT_JOIN (
  PRODUCT_ID_LEFT  VARCHAR(36) NOT NULL,
  PRODUCT_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ID_LEFT) REFERENCES PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID_RIGHT) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_PRIMARY_SALES_CHANNEL_JOIN (
  PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID),
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID)
);

CREATE TABLE PRODUCT_VALID_FOR_PERIOD_UO_M_JOIN (
  PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE PRODUCT_BRAND_JOIN (
  PRODUCT_ID  VARCHAR(36) NOT NULL,
  BRAND_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID),
  FOREIGN KEY(BRAND_ID) REFERENCES BRAND(ID)
);

CREATE TABLE BUNDLE_PRODUCT_PRIMARY_PRODUCT_CATEGORY_JOIN (
  BUNDLE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(BUNDLE_PRODUCT_ID) REFERENCES BUNDLE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE BUNDLE_PRODUCT_MASTER_PRODUCT_JOIN (
  BUNDLE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(BUNDLE_PRODUCT_ID) REFERENCES BUNDLE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE BUNDLE_PRODUCT_PRIMARY_SALES_CHANNEL_JOIN (
  BUNDLE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_CHANNEL_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(BUNDLE_PRODUCT_ID) REFERENCES BUNDLE_PRODUCT(ID),
  FOREIGN KEY(SALES_CHANNEL_ID) REFERENCES SALES_CHANNEL(ID)
);

CREATE TABLE BUNDLE_PRODUCT_VALID_FOR_PERIOD_UO_M_JOIN (
  BUNDLE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(BUNDLE_PRODUCT_ID) REFERENCES BUNDLE_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_VALIDITY_TIME_PERIOD_UO_M_ID) REFERENCES PRODUCT_VALIDITY_TIME_PERIOD_UO_M(ID)
);

CREATE TABLE BUNDLE_PRODUCT_BRAND_JOIN (
  BUNDLE_PRODUCT_ID  VARCHAR(36) NOT NULL,
  BRAND_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(BUNDLE_PRODUCT_ID) REFERENCES BUNDLE_PRODUCT(ID),
  FOREIGN KEY(BRAND_ID) REFERENCES BRAND(ID)
);

CREATE TABLE PRODUCT_CATEGORY_ATTRIBUTE_SET_PRODUCT_CATEGORY_JOIN (
  PRODUCT_CATEGORY_ATTRIBUTE_SET_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_ATTRIBUTE_SET_ID) REFERENCES PRODUCT_CATEGORY_ATTRIBUTE_SET(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE PRODUCT_CATEGORY_TRANSLATION_PRODUCT_CATEGORY_JOIN (
  PRODUCT_CATEGORY_TRANSLATION_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_TRANSLATION_ID) REFERENCES PRODUCT_CATEGORY_TRANSLATION(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE PRODUCT_CATEGORY_PRODUCT_CATALOG_JOIN (
  PRODUCT_CATEGORY_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATALOG_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID),
  FOREIGN KEY(PRODUCT_CATALOG_ID) REFERENCES PRODUCT_CATALOG(ID)
);

CREATE TABLE PRODUCT_CATEGORY_PARENT_CATEGORY_JOIN (
  PRODUCT_CATEGORY_ID_LEFT  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID_RIGHT VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_ID_LEFT) REFERENCES PRODUCT_CATEGORY(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID_RIGHT) REFERENCES PRODUCT_CATEGORY(ID)
);

CREATE TABLE PRODUCT_CATALOG_TRANSLATION_PRODUCT_CATALOG_JOIN (
  PRODUCT_CATALOG_TRANSLATION_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATALOG_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATALOG_TRANSLATION_ID) REFERENCES PRODUCT_CATALOG_TRANSLATION(ID),
  FOREIGN KEY(PRODUCT_CATALOG_ID) REFERENCES PRODUCT_CATALOG(ID)
);

CREATE TABLE PRODUCT_CATEGORY_PRODUCT_PRODUCT_JOIN (
  PRODUCT_CATEGORY_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_PRODUCT_ID) REFERENCES PRODUCT_CATEGORY_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE PRODUCT_CATEGORY_PRODUCT_PRODUCT_CATEGORY_JOIN (
  PRODUCT_CATEGORY_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_CATEGORY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PRODUCT_CATEGORY_PRODUCT_ID) REFERENCES PRODUCT_CATEGORY_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(ID)
);